import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import seaborn as sns
import matplotlib.pyplot as plt
from src.models.llms import load_llm
from src.utils import get_all_datasets, get_dataset, safe_read_csv, add_chart_card
import numpy as np
import warnings
warnings.filterwarnings('ignore')

st.set_page_config(page_title="Bi·ªÉu ƒê·ªì Th√¥ng Minh N√¢ng Cao", layout="wide")

# Professional styling with modern color schemes
st.markdown("""
<style>
    .chart-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 2rem;
        border-radius: 15px;
        color: white;
        margin-bottom: 2rem;
        text-align: center;
    }
    .recommendation-card {
        background: linear-gradient(135deg, #56CCF2 0%, #2F80ED 100%);
        padding: 1.5rem;
        border-radius: 10px;
        color: white;
        margin: 1rem 0;
        box-shadow: 0 4px 15px rgba(0,0,0,0.2);
    }
    .chart-option {
        color: black;
        background: #f8f9fa;
        padding: 1rem;
        border-radius: 8px;
        border: 2px solid transparent;
        margin: 0.5rem 0;
        cursor: pointer;
        transition: all 0.3s ease;
    }
    .chart-option:hover {
        border-color: #667eea;
        box-shadow: 0 2px 8px rgba(102, 126, 234, 0.2);
    }
    .color-palette {
        display: flex;
        gap: 10px;
        margin: 10px 0;
    }
    .color-box {
        width: 30px;
        height: 30px;
        border-radius: 5px;
        border: 2px solid white;
        box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    }
</style>
""", unsafe_allow_html=True)

st.markdown('<div class="chart-header"><h1>üìà C√¥ng C·ª• T·∫°o Bi·ªÉu ƒê·ªì Th√¥ng Minh AI</h1><p>Nh·∫≠n ƒë·ªÅ xu·∫•t bi·ªÉu ƒë·ªì th√¥ng minh v√† t·∫°o ra c√°c tr·ª±c quan h√≥a tuy·ªát ƒë·∫πp</p></div>', unsafe_allow_html=True)

llm = load_llm("gpt-4o")

# B·∫£ng m√†u chuy√™n nghi·ªáp
COLOR_PALETTES = {
    "Xanh Chuy√™n Nghi·ªáp": ["#1f77b4", "#ff7f0e", "#2ca02c", "#d62728", "#9467bd", "#8c564b", "#e377c2", "#7f7f7f", "#bcbd22", "#17becf"],
    "S·ªëng ƒê·ªông": ["#FF6B6B", "#4ECDC4", "#45B7D1", "#96CEB4", "#FFEAA7", "#DDA0DD", "#98D8C8", "#F7DC6F", "#BB8FCE", "#85C1E9"],
    "Doanh Nghi·ªáp": ["#2C3E50", "#3498DB", "#E74C3C", "#F39C12", "#27AE60", "#8E44AD", "#16A085", "#E67E22", "#34495E", "#1ABC9C"],
    "Ho√†ng H√¥n": ["#FF6B35", "#F7931E", "#FFD23F", "#06FFA5", "#118AB2", "#073B4C", "#E63946", "#F77F00", "#FCBF49", "#003566"],
    "ƒê·∫°i D∆∞∆°ng": ["#0077BE", "#00A8CC", "#0FA3B1", "#B5E2FA", "#F9E784", "#F8AD9D", "#F4975A", "#E8871E", "#DA627D", "#A53860"]
}

# T·∫£i datasets
datasets = get_all_datasets()
if not datasets:
    st.warning("‚ö†Ô∏è Vui l√≤ng t·∫£i l√™n b·ªô d·ªØ li·ªáu t·ª´ trang B·∫£ng ƒëi·ªÅu khi·ªÉn.")
    st.stop()

dataset_options = {f"{d[0]} - {d[1]}": d[0] for d in datasets}
selected = st.selectbox("üìÇ Ch·ªçn b·ªô d·ªØ li·ªáu ƒë·ªÉ ph√¢n t√≠ch:", list(dataset_options.keys()))
dataset_id = dataset_options[selected]
dataset = get_dataset(dataset_id)
file_path = dataset[2]

@st.cache_data
def load_csv(file_path):
    for enc in ['utf-8', 'ISO-8859-1', 'utf-16', 'cp1252']:
        try:
            return pd.read_csv(file_path, encoding=enc)
        except:
            continue
    raise ValueError("‚ùå Kh√¥ng th·ªÉ gi·∫£i m√£ file CSV.")

df = load_csv(file_path)

st.markdown(f"**üßæ Th√¥ng tin B·ªô d·ªØ li·ªáu:** `{dataset[1]}` ‚Äî {df.shape[0]:,} h√†ng √ó {df.shape[1]} c·ªôt")

def get_chart_recommendations(df, user_intent=""):
    """ƒê·ªÅ xu·∫•t bi·ªÉu ƒë·ªì AI d·ª±a tr√™n ƒë·∫∑c ƒëi·ªÉm d·ªØ li·ªáu"""
    
    numeric_cols = df.select_dtypes(include=[np.number]).columns.tolist()
    categorical_cols = df.select_dtypes(include=['object', 'category']).columns.tolist()
    
    # T√¨m c·ªôt c√≥ th·ªÉ l√† th·ªùi gian (bao g·ªìm c·∫£ year)
    datetime_cols = []
    for col in df.columns:
        if ('date' in col.lower() or 'time' in col.lower() or 
            'year' in col.lower() or col.lower() == 'year'):
            datetime_cols.append(col)
        # Ki·ªÉm tra n·∫øu c·ªôt s·ªë c√≥ gi√° tr·ªã nƒÉm (1900-2100)
        elif (col in numeric_cols and 
              df[col].min() >= 1900 and df[col].max() <= 2100 and 
              df[col].nunique() < 50):
            datetime_cols.append(col)
    
    recommendations = []
    
    # Ph√¢n t√≠ch d·ª±a tr√™n ki·ªÉu d·ªØ li·ªáu
    if len(numeric_cols) >= 2:
        recommendations.append({
            "type": "Bi·ªÉu ƒê·ªì Ph√¢n T√°n",
            "description": "Ho√†n h·∫£o ƒë·ªÉ kh√°m ph√° m·ªëi quan h·ªá gi·ªØa hai bi·∫øn s·ªë",
            "confidence": 0.9,
            "suggested_x": numeric_cols[0],
            "suggested_y": numeric_cols[1],
            "icon": "üîµ",
            "color_scheme": "Xanh Chuy√™n Nghi·ªáp"
        })
        
        recommendations.append({
            "type": "B·∫£n ƒê·ªì Nhi·ªát T∆∞∆°ng Quan",
            "description": "Hi·ªÉn th·ªã t∆∞∆°ng quan gi·ªØa t·∫•t c·∫£ c√°c bi·∫øn s·ªë",
            "confidence": 0.85,
            "suggested_x": "T·∫•t c·∫£ bi·∫øn s·ªë",
            "suggested_y": "T·∫•t c·∫£ bi·∫øn s·ªë",
            "icon": "üî•",
            "color_scheme": "Ho√†ng H√¥n"
        })
    
    if categorical_cols and numeric_cols:
        recommendations.append({
            "type": "Bi·ªÉu ƒê·ªì H·ªôp",
            "description": "So s√°nh ph√¢n ph·ªëi d·ªØ li·ªáu s·ªë theo c√°c danh m·ª•c",
            "confidence": 0.8,
            "suggested_x": categorical_cols[0],
            "suggested_y": numeric_cols[0],
            "icon": "üì¶",
            "color_scheme": "S·ªëng ƒê·ªông"
        })
        
        recommendations.append({
            "type": "Bi·ªÉu ƒê·ªì C·ªôt",
            "description": "Hi·ªÉn th·ªã gi√° tr·ªã trung b√¨nh ho·∫∑c t·ªïng theo danh m·ª•c",
            "confidence": 0.75,
            "suggested_x": categorical_cols[0],
            "suggested_y": numeric_cols[0],
            "icon": "üìä",
            "color_scheme": "Doanh Nghi·ªáp"
        })
    
    if datetime_cols and numeric_cols:
        # ∆Øu ti√™n c·ªôt year n·∫øu c√≥
        time_col = datetime_cols[0]
        for col in datetime_cols:
            if 'year' in col.lower() or col.lower() == 'year':
                time_col = col
                break
                
        recommendations.append({
            "type": "Chu·ªói Th·ªùi Gian",
            "description": "Theo d√µi thay ƒë·ªïi theo th·ªùi gian ho·∫∑c nƒÉm",
            "confidence": 0.95,
            "suggested_x": time_col,
            "suggested_y": numeric_cols[0],
            "icon": "üìà",
            "color_scheme": "ƒê·∫°i D∆∞∆°ng"
        })
    
    if categorical_cols:
        recommendations.append({
            "type": "Bi·ªÉu ƒê·ªì Tr√≤n",
            "description": "Hi·ªÉn th·ªã t·ª∑ l·ªá c·ªßa c√°c danh m·ª•c",
            "confidence": 0.7,
            "suggested_x": categorical_cols[0],
            "suggested_y": "ƒê·∫øm",
            "icon": "ü•ß",
            "color_scheme": "Ho√†ng H√¥n"
        })
    
    # S·∫Øp x·∫øp theo ƒë·ªô tin c·∫≠y
    recommendations.sort(key=lambda x: x['confidence'], reverse=True)
    
    return recommendations[:6]  # Tr·∫£ v·ªÅ 6 ƒë·ªÅ xu·∫•t h√†ng ƒë·∫ßu

def create_enhanced_chart(chart_type, df, x_col, y_col, color_col=None, palette="Xanh Chuy√™n Nghi·ªáp", custom_prompt=""):
    """T·∫°o bi·ªÉu ƒë·ªì n√¢ng cao v·ªõi thi·∫øt k·∫ø chuy√™n nghi·ªáp"""
    
    colors = COLOR_PALETTES[palette]
    
    fig = None
    code = ""
    
    if chart_type == "Bi·ªÉu ƒê·ªì Ph√¢n T√°n":
        fig = px.scatter(df, x=x_col, y=y_col, color=color_col,
                        color_discrete_sequence=colors,
                        title=f"Bi·ªÉu ƒê·ªì Ph√¢n T√°n: {x_col} vs {y_col}",
                        template="plotly_white")
        
        code = f"""
import plotly.express as px

fig = px.scatter(df, x='{x_col}', y='{y_col}', 
                color='{color_col}' if '{color_col}' != 'None' else None,
                color_discrete_sequence={colors},
                title="Bi·ªÉu ƒê·ªì Ph√¢n T√°n: {x_col} vs {y_col}",
                template="plotly_white")

fig.update_layout(
    font=dict(size=12),
    plot_bgcolor='rgba(0,0,0,0)',
    paper_bgcolor='rgba(0,0,0,0)'
)
fig.show()
"""
    
    elif chart_type == "Bi·ªÉu ƒê·ªì C·ªôt":
        if df[x_col].dtype == 'object':
            agg_df = df.groupby(x_col)[y_col].mean().reset_index()
        else:
            agg_df = df
            
        fig = px.bar(agg_df, x=x_col, y=y_col,
                    color_discrete_sequence=colors,
                    title=f"Bi·ªÉu ƒê·ªì C·ªôt: {y_col} theo {x_col}",
                    template="plotly_white")
        
        code = f"""
import plotly.express as px

# T·ªïng h·ª£p d·ªØ li·ªáu n·∫øu c·∫ßn
if df['{x_col}'].dtype == 'object':
    agg_df = df.groupby('{x_col}')['{y_col}'].mean().reset_index()
else:
    agg_df = df

fig = px.bar(agg_df, x='{x_col}', y='{y_col}',
            color_discrete_sequence={colors},
            title="Bi·ªÉu ƒê·ªì C·ªôt: {y_col} theo {x_col}",
            template="plotly_white")
fig.show()
"""
    
    elif chart_type == "Bi·ªÉu ƒê·ªì H·ªôp":
        fig = px.box(df, x=x_col, y=y_col, color=color_col,
                    color_discrete_sequence=colors,
                    title=f"Bi·ªÉu ƒê·ªì H·ªôp: Ph√¢n ph·ªëi {y_col} theo {x_col}",
                    template="plotly_white")
        
        code = f"""
import plotly.express as px

fig = px.box(df, x='{x_col}', y='{y_col}', 
            color='{color_col}' if '{color_col}' != 'None' else None,
            color_discrete_sequence={colors},
            title="Bi·ªÉu ƒê·ªì H·ªôp: Ph√¢n ph·ªëi {y_col} theo {x_col}",
            template="plotly_white")
fig.show()
"""
    
    elif chart_type == "Chu·ªói Th·ªùi Gian":
        # T·∫°o b·∫£n sao ƒë·ªÉ tr√°nh thay ƒë·ªïi d·ªØ li·ªáu g·ªëc
        df_temp = df.copy()
        
        # Ki·ªÉm tra v√† x·ª≠ l√Ω d·ªØ li·ªáu th·ªùi gian
        try:
            # N·∫øu c·ªôt x ch·ª©a nƒÉm (year) th√¨ s·∫Øp x·∫øp theo nƒÉm
            if 'year' in x_col.lower() or df_temp[x_col].dtype in ['int64', 'float64']:
                df_temp = df_temp.sort_values(x_col)
                # N·∫øu d·ªØ li·ªáu c√≥ nhi·ªÅu gi√° tr·ªã cho c√πng m·ªôt nƒÉm, t√≠nh trung b√¨nh
                if df_temp[x_col].duplicated().any():
                    df_temp = df_temp.groupby(x_col)[y_col].mean().reset_index()
            else:
                # Th·ª≠ chuy·ªÉn ƒë·ªïi sang datetime
                df_temp[x_col] = pd.to_datetime(df_temp[x_col])
                df_temp = df_temp.sort_values(x_col)
        except:
            # N·∫øu kh√¥ng th·ªÉ chuy·ªÉn ƒë·ªïi, s·∫Øp x·∫øp theo gi√° tr·ªã g·ªëc
            df_temp = df_temp.sort_values(x_col)
        
        fig = px.line(df_temp, x=x_col, y=y_col, color=color_col,
                     color_discrete_sequence=colors,
                     title=f"Bi·ªÉu ƒê·ªì ƒê∆∞·ªùng: {y_col} theo {x_col}",
                     template="plotly_white",
                     markers=True)  # Th√™m markers ƒë·ªÉ d·ªÖ nh√¨n h∆°n
        
        code = f"""
import plotly.express as px
import pandas as pd

# T·∫°o b·∫£n sao v√† x·ª≠ l√Ω d·ªØ li·ªáu
df_temp = df.copy()

# X·ª≠ l√Ω d·ªØ li·ªáu th·ªùi gian
try:
    if 'year' in '{x_col}'.lower() or df_temp['{x_col}'].dtype in ['int64', 'float64']:
        df_temp = df_temp.sort_values('{x_col}')
        # T√≠nh trung b√¨nh n·∫øu c√≥ nhi·ªÅu gi√° tr·ªã cho c√πng m·ªôt nƒÉm
        if df_temp['{x_col}'].duplicated().any():
            df_temp = df_temp.groupby('{x_col}')['{y_col}'].mean().reset_index()
    else:
        df_temp['{x_col}'] = pd.to_datetime(df_temp['{x_col}'])
        df_temp = df_temp.sort_values('{x_col}')
except:
    df_temp = df_temp.sort_values('{x_col}')

fig = px.line(df_temp, x='{x_col}', y='{y_col}',
             color='{color_col}' if '{color_col}' != 'None' else None,
             color_discrete_sequence={colors},
             title="Bi·ªÉu ƒê·ªì ƒê∆∞·ªùng: {y_col} theo {x_col}",
             template="plotly_white",
             markers=True)
fig.show()
"""
    
    elif chart_type == "B·∫£n ƒê·ªì Nhi·ªát T∆∞∆°ng Quan":
        numeric_df = df.select_dtypes(include=[np.number])
        corr_matrix = numeric_df.corr()
        
        fig = px.imshow(corr_matrix, 
                       color_continuous_scale="RdBu_r",
                       title="B·∫£n ƒê·ªì Nhi·ªát T∆∞∆°ng Quan",
                       template="plotly_white")
        
        code = f"""
import plotly.express as px

numeric_df = df.select_dtypes(include=[np.number])
corr_matrix = numeric_df.corr()

fig = px.imshow(corr_matrix, 
               color_continuous_scale="RdBu_r",
               title="B·∫£n ƒê·ªì Nhi·ªát T∆∞∆°ng Quan",
               template="plotly_white")
fig.show()
"""
    
    elif chart_type == "Bi·ªÉu ƒê·ªì Tr√≤n":
        value_counts = df[x_col].value_counts().head(10)
        fig = px.pie(values=value_counts.values, names=value_counts.index,
                    color_discrete_sequence=colors,
                    title=f"Ph√¢n ph·ªëi c·ªßa {x_col}",
                    template="plotly_white")
        
        code = f"""
import plotly.express as px

value_counts = df['{x_col}'].value_counts().head(10)
fig = px.pie(values=value_counts.values, names=value_counts.index,
            color_discrete_sequence={colors},
            title="Ph√¢n ph·ªëi c·ªßa {x_col}",
            template="plotly_white")
fig.show()
"""
    
    elif chart_type == "Bi·ªÉu ƒê·ªì Violin":
        fig = px.violin(df, x=x_col, y=y_col, color=color_col,
                       color_discrete_sequence=colors,
                       title=f"Bi·ªÉu ƒê·ªì Violin: Ph√¢n ph·ªëi {y_col} theo {x_col}",
                       template="plotly_white")
        
        code = f"""
import plotly.express as px

fig = px.violin(df, x='{x_col}', y='{y_col}',
               color='{color_col}' if '{color_col}' != 'None' else None,
               color_discrete_sequence={colors},
               title="Bi·ªÉu ƒê·ªì Violin: Ph√¢n ph·ªëi {y_col} theo {x_col}",
               template="plotly_white")
fig.show()
"""
    
    elif chart_type == "Bi·ªÉu ƒê·ªì T·∫ßn Su·∫•t":
        fig = px.histogram(df, x=x_col, y=y_col, color=color_col,
                          color_discrete_sequence=colors,
                          title=f"Bi·ªÉu ƒê·ªì T·∫ßn Su·∫•t: {x_col}",
                          template="plotly_white")
        
        code = f"""
import plotly.express as px

fig = px.histogram(df, x='{x_col}', y='{y_col}' if '{y_col}' != '{x_col}' else None,
                  color='{color_col}' if '{color_col}' != 'None' else None,
                  color_discrete_sequence={colors},
                  title="Bi·ªÉu ƒê·ªì T·∫ßn Su·∫•t: {x_col}",
                  template="plotly_white")
fig.show()
"""
    
    # Apply custom styling
    if fig:
        fig.update_layout(
            font=dict(size=12, family="Arial, sans-serif"),
            plot_bgcolor='rgba(0,0,0,0)',
            paper_bgcolor='rgba(0,0,0,0)',
            title=dict(x=0.5, font=dict(size=16, color='#2c3e50')),
            margin=dict(t=60, l=60, r=60, b=60)
        )
        
        # Th√™m s·ª≠a ƒë·ªïi prompt t√πy ch·ªânh n·∫øu ƒë∆∞·ª£c cung c·∫•p
        if custom_prompt:
            prompt_modifications = f"""
            
# S·ª≠a ƒë·ªïi t√πy ch·ªânh d·ª±a tr√™n y√™u c·∫ßu ng∆∞·ªùi d√πng: "{custom_prompt}"
# Th√™m b·∫•t k·ª≥ thi·∫øt k·∫ø ho·∫∑c s·ª≠a ƒë·ªïi c·ª• th·ªÉ n√†o ·ªü ƒë√¢y
"""
            code += prompt_modifications
    
    return fig, code

# Giao di·ªán ch√≠nh
col1, col2 = st.columns([1, 2])

with col1:
    st.subheader("üéØ ƒê·ªÅ xu·∫•t Bi·ªÉu ƒë·ªì AI")
    
    user_intent = st.text_input("üí≠ B·∫°n mu·ªën k·ªÉ c√¢u chuy·ªán g√¨?", 
                               placeholder="v√≠ d·ª•: hi·ªÉn th·ªã xu h∆∞·ªõng, so s√°nh danh m·ª•c, t√¨m ngo·∫°i l·ªá...")
    
    recommendations = get_chart_recommendations(df, user_intent)
    
    st.markdown("### ü§ñ Bi·ªÉu ƒë·ªì ƒê∆∞·ª£c ƒë·ªÅ xu·∫•t")
    for i, rec in enumerate(recommendations):
        with st.container():
            st.markdown(f"""
            <div class="chart-option">
                <h4>{rec['icon']} {rec['type']}</h4>
                <p>{rec['description']}</p>
                <small>ƒê·ªô tin c·∫≠y: {rec['confidence']:.0%} | M√†u s·∫Øc: {rec['color_scheme']}</small>
            </div>
            """, unsafe_allow_html=True)
            
            if st.button(f"S·ª≠ d·ª•ng {rec['type']}", key=f"rec_{i}"):
                st.session_state.selected_chart = rec
                st.session_state.auto_x = rec['suggested_x']
                st.session_state.auto_y = rec['suggested_y']
                st.session_state.auto_palette = rec['color_scheme']

with col2:
    st.subheader("‚öôÔ∏è C·∫•u h√¨nh Bi·ªÉu ƒë·ªì")
    
    # L·ª±a ch·ªçn lo·∫°i bi·ªÉu ƒë·ªì
    chart_types = ["Bi·ªÉu ƒê·ªì Ph√¢n T√°n", "Bi·ªÉu ƒê·ªì C·ªôt", "Bi·ªÉu ƒê·ªì H·ªôp", "Chu·ªói Th·ªùi Gian", "B·∫£n ƒê·ªì Nhi·ªát T∆∞∆°ng Quan", "Bi·ªÉu ƒê·ªì Tr√≤n", "Bi·ªÉu ƒê·ªì Violin", "Bi·ªÉu ƒê·ªì T·∫ßn Su·∫•t"]
    selected_chart_type = st.selectbox("üìä Lo·∫°i Bi·ªÉu ƒë·ªì:", chart_types, 
                                      index=chart_types.index(st.session_state.get('selected_chart', {}).get('type', 'Bi·ªÉu ƒê·ªì Ph√¢n T√°n')) if st.session_state.get('selected_chart', {}).get('type') in chart_types else 0)
    
    # L·ª±a ch·ªçn c·ªôt
    col_a, col_b = st.columns(2)
    with col_a:
        x_axis = st.selectbox("Tr·ª•c X:", df.columns.tolist(), 
                             index=df.columns.tolist().index(st.session_state.get('auto_x', df.columns[0])) if st.session_state.get('auto_x') in df.columns else 0)
    
    with col_b:
        numeric_cols = df.select_dtypes(include=['number']).columns.tolist()
        if numeric_cols:
            y_axis = st.selectbox("Tr·ª•c Y:", numeric_cols,
                                 index=numeric_cols.index(st.session_state.get('auto_y', numeric_cols[0])) if st.session_state.get('auto_y') in numeric_cols else 0)
        else:
            y_axis = st.selectbox("Tr·ª•c Y:", df.columns.tolist())
    
    # M√†u s·∫Øc v√† nh√≥m
    categorical_cols = df.select_dtypes(include=['object', 'category']).columns.tolist()
    color_by = st.selectbox("üé® M√†u theo:", ["Kh√¥ng"] + categorical_cols)
    
    # L·ª±a ch·ªçn b·∫£ng m√†u
    palette_name = st.selectbox("üé® B·∫£ng M√†u:", list(COLOR_PALETTES.keys()),
                               index=list(COLOR_PALETTES.keys()).index(st.session_state.get('auto_palette', 'Xanh Chuy√™n Nghi·ªáp')))
    
    # Hi·ªÉn th·ªã xem tr∆∞·ªõc b·∫£ng m√†u
    st.markdown("**Xem tr∆∞·ªõc M√†u s·∫Øc:**")
    palette_html = '<div class="color-palette">'
    for color in COLOR_PALETTES[palette_name][:8]:
        palette_html += f'<div class="color-box" style="background-color: {color}"></div>'
    palette_html += '</div>'
    st.markdown(palette_html, unsafe_allow_html=True)
    
    # Prompt thi·∫øt k·∫ø t√πy ch·ªânh
    custom_prompt = st.text_area("‚ú® H∆∞·ªõng d·∫´n Thi·∫øt k·∫ø B·ªï sung:", 
                                placeholder="v√≠ d·ª•: th√™m ƒë∆∞·ªùng xu h∆∞·ªõng, s·ª≠ d·ª•ng thang log, l√†m n·ªïi b·∫≠t ngo·∫°i l·ªá, th√™m ch√∫ th√≠ch...")
    
    # T·∫°o bi·ªÉu ƒë·ªì
    if st.button("üöÄ T·∫°o Bi·ªÉu ƒë·ªì", type="primary"):
        with st.spinner("ƒêang t·∫°o tr·ª±c quan h√≥a c·ªßa b·∫°n..."):
            fig, code = create_enhanced_chart(
                selected_chart_type, df, x_axis, y_axis, 
                color_by if color_by != "Kh√¥ng" else None,
                palette_name, custom_prompt
            )
            
            if fig:
                st.session_state.current_fig = fig
                st.session_state.current_code = code
                st.session_state.chart_generated = True

# Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì ƒë√£ t·∫°o
if st.session_state.get('chart_generated', False):
    st.subheader("üìä Tr·ª±c quan h√≥a ƒê√£ t·∫°o")
    st.plotly_chart(st.session_state.current_fig, use_container_width=True)
    
    # Insights ƒë∆∞·ª£c t·∫°o b·ªüi AI
    with st.spinner("ƒêang t·∫°o insights AI..."):
        insight_prompt = f"""
        Ph√¢n t√≠ch bi·ªÉu ƒë·ªì {selected_chart_type} n√†y hi·ªÉn th·ªã {x_axis} vs {y_axis} t·ª´ b·ªô d·ªØ li·ªáu.
        
        Th√¥ng tin b·ªô d·ªØ li·ªáu:
        - K√≠ch th∆∞·ªõc: {df.shape}
        - C√°c c·ªôt: {list(df.columns)}
        
        Cung c·∫•p 3-5 insights c·ª• th·ªÉ v·ªÅ:
        1. C√°c m·∫´u ho·∫∑c xu h∆∞·ªõng ch√≠nh c√≥ th·ªÉ nh√¨n th·∫•y
        2. Ngo·∫°i l·ªá ho·∫∑c ƒëi·ªÉm d·ªØ li·ªáu th√∫ v·ªã
        3. √ù nghƒ©a kinh doanh
        4. ƒê·ªÅ xu·∫•t ph√¢n t√≠ch ti·∫øp theo
        
        H√£y c·ª• th·ªÉ v√† c√≥ th·ªÉ h√†nh ƒë·ªông. Bao g·ªìm c√°c con s·ªë th·ª±c t·∫ø khi c√≥ th·ªÉ.
        """
        response = llm.invoke(insight_prompt)
        insights = response.content if hasattr(response, 'content') else str(response)
        
        st.markdown(f"""
        <div class="recommendation-card">
            <h3>üß† Insights ƒê∆∞·ª£c t·∫°o b·ªüi AI</h3>
            {insights}
        </div>
        """, unsafe_allow_html=True)
    
    # T√πy ch·ªçn m√£ v√† xu·∫•t
    with st.expander("üìã Xem M√£ ƒê√£ t·∫°o", expanded=False):
        st.code(st.session_state.current_code, language="python")
    
    col_a, col_b, col_c = st.columns(3)
    with col_a:
        if st.button("üíæ L∆∞u Bi·ªÉu ƒë·ªì"):
            add_chart_card(dataset_id, f"Bi·ªÉu ƒë·ªì: {selected_chart_type}", insights, st.session_state.current_code)
            st.success("‚úÖ Bi·ªÉu ƒë·ªì ƒë√£ l∆∞u v√†o l·ªãch s·ª≠!")
    
    with col_b:
        if st.button("üì• T·∫£i PNG"):
            st.info("T·∫£i PNG s·∫Ω ƒë∆∞·ª£c tri·ªÉn khai ·ªü ƒë√¢y")
    
    with col_c:
        if st.button("üìä T·∫°o Dashboard"):
            st.info("T·∫°o dashboard s·∫Ω ƒë∆∞·ª£c tri·ªÉn khai ·ªü ƒë√¢y")

# Th∆∞ vi·ªán bi·ªÉu ƒë·ªì v√† l·ªãch s·ª≠
st.subheader("üñºÔ∏è Th∆∞ vi·ªán Bi·ªÉu ƒë·ªì & C·∫£m h·ª©ng")
with st.expander("Xem V√≠ d·ª• Bi·ªÉu ƒë·ªì", expanded=False):
    example_charts = [
        {"name": "Xu h∆∞·ªõng B√°n h√†ng", "type": "Chu·ªói Th·ªùi Gian", "description": "Hi·ªáu su·∫•t b√°n h√†ng h√†ng th√°ng theo th·ªùi gian"},
        {"name": "Ph√¢n kh√∫c Kh√°ch h√†ng", "type": "Bi·ªÉu ƒê·ªì Tr√≤n", "description": "Ph√¢n ph·ªëi c√°c lo·∫°i kh√°ch h√†ng"},
        {"name": "So s√°nh Hi·ªáu su·∫•t", "type": "Bi·ªÉu ƒê·ªì H·ªôp", "description": "So s√°nh c√°c ch·ªâ s·ªë qua c√°c ph√≤ng ban"},
        {"name": "Ph√¢n t√≠ch T∆∞∆°ng quan", "type": "B·∫£n ƒê·ªì Nhi·ªát", "description": "M·ªëi quan h·ªá gi·ªØa c√°c bi·∫øn"}
    ]
    
    for chart in example_charts:
        st.markdown(f"**{chart['name']}** ({chart['type']}): {chart['description']}")

# G·ª£i √Ω ƒëi·ªÅu h∆∞·ªõng
st.markdown("---")
st.info("üí° **M·∫πo Chuy√™n Nghi·ªáp:** S·ª≠ d·ª•ng c√°c ƒë·ªÅ xu·∫•t AI ƒë·ªÉ b·∫Øt ƒë·∫ßu nhanh ch√≥ng, sau ƒë√≥ t√πy ch·ªânh v·ªõi s·ªü th√≠ch thi·∫øt k·∫ø c·ªßa ri√™ng b·∫°n!")