import streamlit as st
import pandas as pd
import os
from src.utils import export_eda_report_to_pdf, init_db, get_all_datasets, rename_dataset, safe_read_csv
import matplotlib.pyplot as plt
import seaborn as sns
import json
import textwrap
import re

from langchain_openai import ChatOpenAI
from langchain.schema import HumanMessage

st.set_page_config(page_title="B√°o c√°o EDA", layout="wide")
st.title("üß† B√°o c√°o Ph√¢n t√≠ch Kh√°m ph√° D·ªØ li·ªáu (EDA)")

# LangChain LLM setup
llm = ChatOpenAI(model="gpt-3.5-turbo", temperature=0)

def clean_llm_json(raw_response):
    # Xo√° markdown code block ```json ho·∫∑c ```
    cleaned = re.sub(r"^```(?:json)?", "", raw_response.strip(), flags=re.IGNORECASE)
    cleaned = re.sub(r"```$", "", cleaned.strip())
    return cleaned.strip()

def generate_eda_report_with_llm(df):
    prompt = f"""
B·∫°n l√† m·ªôt nh√† ph√¢n t√≠ch d·ªØ li·ªáu chuy√™n nghi·ªáp. V·ªõi b·ªô d·ªØ li·ªáu `df` ƒë√£ cho, th·ª±c hi·ªán ph√¢n t√≠ch kh√°m ph√° d·ªØ li·ªáu (EDA) chuy√™n s√¢u v√† tr·∫£ v·ªÅ k·∫øt qu·∫£ c·ªßa b·∫°n d∆∞·ªõi d·∫°ng JSON. Ph·∫£n h·ªìi c·ªßa b·∫°n **ph·∫£i** l√† JSON h·ª£p l·ªá v·ªõi c√°c tr∆∞·ªùng sau:

1. introduction: Gi·ªõi thi·ªáu markdown v·ªÅ k√≠ch th∆∞·ªõc b·ªô d·ªØ li·ªáu v√† c√°c lo·∫°i.
2. data_quality: M√¥ t·∫£ v·ªÅ gi√° tr·ªã thi·∫øu, b·∫£n sao v√† ch·∫•t l∆∞·ª£ng c·ªôt.
3. univariate: M·ªôt danh s√°ch trong ƒë√≥ m·ªói ph·∫ßn t·ª≠ l√† m·ªôt t·ª´ ƒëi·ªÉn v·ªõi c√°c tr∆∞·ªùng sau:
   - insight: M√¥ t·∫£ m·ªôt c√¢u v·ªÅ c·ªôt ƒë·∫°i di·ªán cho g√¨ v√† ƒëi·ªÅu g√¨ l√†m cho n√≥ th√∫ v·ªã.
   - code: M√£ Python matplotlib ho·∫∑c seaborn ƒë·ªÉ tr·ª±c quan h√≥a c·ªôt. S·ª≠ d·ª•ng c√°c lo·∫°i bi·ªÉu ƒë·ªì th·ª±c h√†nh t·ªët nh·∫•t:
       - ƒê·ªëi v·ªõi c·ªôt s·ªë: s·ª≠ d·ª•ng `sns.histplot(df['col'], bins=30, kde=True)`
       - ƒê·ªëi v·ªõi c·ªôt ph√¢n lo·∫°i: n·∫øu `nunique <= 20`, s·ª≠ d·ª•ng `sns.countplot`; ng∆∞·ª£c l·∫°i s·ª≠ d·ª•ng barplot cho top 10 gi√° tr·ªã.
       - B·ªè qua c√°c c·ªôt c√≥ h∆°n 100 gi√° tr·ªã duy nh·∫•t.
   - insight_after_chart: Gi·∫£i th√≠ch markdown ng·∫Øn g·ªçn v·ªÅ bi·ªÉu ƒë·ªì. ƒê·ªÅ c·∫≠p ƒë·∫øn h√¨nh d·∫°ng ph√¢n ph·ªëi (v√≠ d·ª•: l·ªách ph·∫£i, ƒë·ªëi x·ª©ng), b·∫•t k·ª≥ gi√° tr·ªã ngo·∫°i l·ªá n√†o, ho·∫∑c danh m·ª•c chi·∫øm ∆∞u th·∫ø. Ng·∫Øn g·ªçn nh∆∞ng c√≥ √Ω nghƒ©a.
4. correlation: M·ªôt t·ª´ ƒëi·ªÉn v·ªõi c√°c kh√≥a sau:
- "insight": M·ªôt ƒëo·∫°n vƒÉn m√¥ t·∫£ m·ª•c ƒë√≠ch c·ªßa ph√¢n t√≠ch t∆∞∆°ng quan, c√°c bi·∫øn n√†o d·ª± ki·∫øn s·∫Ω t∆∞∆°ng quan, v√† m·ªëi quan h·ªá n√†o th√∫ v·ªã nh·∫•t ƒë·ªÉ kh√°m ph√°.
- "code": M√£ Python s·ª≠ d·ª•ng seaborn ho·∫∑c matplotlib ƒë·ªÉ t·∫°o b·∫£n ƒë·ªì nhi·ªát t∆∞∆°ng quan c·ªßa t·∫•t c·∫£ c√°c c·ªôt s·ªë trong b·ªô d·ªØ li·ªáu. S·ª≠ d·ª•ng `sns.heatmap(df.corr(), annot=True, cmap='coolwarm')` v√† th√™m ti√™u ƒë·ªÅ th√¥ng tin.
- "insight_after_chart": Gi·∫£i th√≠ch chi ti·∫øt v·ªÅ b·∫£n ƒë·ªì nhi·ªát. Bao g·ªìm:
    - ƒê·ªÅ c·∫≠p ƒë·∫øn c√°c t∆∞∆°ng quan t√≠ch c·ª±c v√† ti√™u c·ª±c m·∫°nh nh·∫•t (v·ªõi t√™n bi·∫øn).
    - Li·ªáu c√≥ t∆∞∆°ng quan n√†o b·∫•t ng·ªù ho·∫∑c tr√°i ng∆∞·ª£c v·ªõi tr·ª±c gi√°c kh√¥ng.
    - B·∫•t k·ª≥ bi·∫øn n√†o d∆∞·ªùng nh∆∞ kh√¥ng li√™n quan ƒë·∫øn c√°c bi·∫øn kh√°c (t∆∞∆°ng quan th·∫•p tr√™n to√†n b·ªô).
    - K·∫øt lu·∫≠n ng·∫Øn v·ªÅ c√°ch th√¥ng tin t∆∞∆°ng quan c√≥ th·ªÉ h·ªó tr·ª£ c√°c nhi·ªám v·ª• xu√¥i d√≤ng (v√≠ d·ª•: d·ª± ƒëo√°n, l·ª±a ch·ªçn t√≠nh nƒÉng).
5. insights: Danh s√°ch c√°c th√¥ng tin chi ti·∫øt
6. recommendations: Danh s√°ch c√°c khuy·∫øn ngh·ªã

ƒê·∫£m b·∫£o ƒë·∫ßu ra c·ªßa b·∫°n ch·ªâ l√† JSON v√† ƒë∆∞·ª£c tho√°t ƒë√∫ng c√°ch.

Xem tr∆∞·ªõc Metadata B·ªô d·ªØ li·ªáu:
- ƒê·∫ßu:
{df.head().to_json(orient="records")}
- Gi√° tr·ªã thi·∫øu:
{df.isnull().sum()[df.isnull().sum() > 0].to_dict()}
- Ki·ªÉu d·ªØ li·ªáu:
{df.dtypes.astype(str).to_dict()}
- M√¥ t·∫£:
{df.describe().to_dict()}

Ch·ªâ tr·∫£ v·ªÅ JSON h·ª£p l·ªá. Kh√¥ng bao g·ªìm n√≥ trong kh·ªëi m√£ markdown (kh√¥ng c√≥ ba d·∫•u g·∫°ch ng∆∞·ª£c).
"""

    response = llm.invoke([HumanMessage(content=prompt)]).content

    try:
        return json.loads(response)
    except json.JSONDecodeError:
        cleaned = clean_llm_json(response)
        try:
            return json.loads(cleaned)
        except json.JSONDecodeError as e:
            st.error("‚ùå Gi·∫£i m√£ JSON th·∫•t b·∫°i. ƒê·∫ßu ra LLM th√¥ ƒë∆∞·ª£c hi·ªÉn th·ªã b√™n d∆∞·ªõi:")
            st.code(response)
            raise e

def generate_final_summary_prompt(sections):
    return textwrap.dedent("""
        B·∫°n l√† m·ªôt nh√† ph√¢n t√≠ch d·ªØ li·ªáu c·∫•p cao ƒë∆∞·ª£c giao nhi·ªám v·ª• vi·∫øt m·ªôt b√°o c√°o EDA cu·ªëi c√πng chi ti·∫øt, chuy√™n nghi·ªáp cho m·ªôt b·ªô d·ªØ li·ªáu v·ªÅ hi·ªáu su·∫•t h·ªçc sinh.
        B√°o c√°o c·ªßa b·∫°n s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã tr·ª±c ti·∫øp cho c√°c b√™n li√™n quan (v√≠ d·ª•: qu·∫£n tr·ªã tr∆∞·ªùng h·ªçc, nh√≥m khoa h·ªçc d·ªØ li·ªáu) v√¨ v·∫≠y n√≥ ph·∫£i to√†n di·ªán, s√¢u s·∫Øc v√† ƒë∆∞·ª£c vi·∫øt b·∫±ng ng√¥n ng·ªØ t·ª± nhi√™n tr√¥i ch·∫£y.

        C·∫•u tr√∫c b√°o c√°o trong markdown ƒë∆∞·ª£c ƒë·ªãnh d·∫°ng t·ªët v·ªõi c√°c ph·∫ßn sau:

        ## üìò Gi·ªõi thi·ªáu
        T√≥m t·∫Øt n·ªôi dung b·ªô d·ªØ li·ªáu (s·ªë h√†ng, c·ªôt, lo·∫°i d·ªØ li·ªáu) v√† m·ª•c ƒë√≠ch c·ªßa n√≥. Bao g·ªìm b·∫£ng xem tr∆∞·ªõc.

        ## üßº Ch·∫•t l∆∞·ª£ng D·ªØ li·ªáu
        B√¨nh lu·∫≠n v·ªÅ gi√° tr·ªã thi·∫øu, b·∫£n ghi tr√πng l·∫∑p v√† ƒë·ªô tin c·∫≠y t·ªïng th·ªÉ. M√¥ t·∫£ b·∫•t k·ª≥ vi·ªác l√†m s·∫°ch d·ªØ li·ªáu n√†o c·∫ßn thi·∫øt ho·∫∑c ƒë√£ ƒë∆∞·ª£c th·ª±c hi·ªán.

        ## üîç Ph√¢n t√≠ch ƒê∆°n bi·∫øn
        T√≥m t·∫Øt c√°c m√¥ h√¨nh ch√≠nh ƒë∆∞·ª£c t√¨m th·∫•y trong c√°c c·ªôt ri√™ng l·∫ª, ƒë·∫∑c bi·ªát l√† c√°c c·ªôt s·ªë. ƒê·ªÅ c·∫≠p ƒë·∫øn ph√¢n ph·ªëi, gi√° tr·ªã ph·ªï bi·∫øn v√† gi√° tr·ªã ngo·∫°i l·ªá.
        Bao g·ªìm tham chi·∫øu ƒë·∫øn c√°c bi·ªÉu ƒë·ªì nh∆∞ bi·ªÉu ƒë·ªì t·∫ßn su·∫•t ho·∫∑c bi·ªÉu ƒë·ªì c·ªôt, v√† ƒë·∫∑t m·ªói bi·ªÉu ƒë·ªì ngay sau ƒëi·ªÉm li√™n quan c·ªßa n√≥. ƒê·∫£m b·∫£o th√¥ng tin chi ti·∫øt v√† bi·ªÉu ƒë·ªì li√™n quan xu·∫•t hi·ªán c√πng nhau trong k·∫øt xu·∫•t.

        ## üìä Th√¥ng tin T∆∞∆°ng quan
        M√¥ t·∫£ c√°c m·ªëi quan h·ªá ch√≠nh ƒë∆∞·ª£c kh√°m ph√° gi·ªØa c√°c c·∫∑p bi·∫øn. Gi·∫£i th√≠ch b·∫£n ƒë·ªì nhi·ªát v√† ch·ªâ ra c√°c t∆∞∆°ng quan m·∫°nh/y·∫øu. Cung c·∫•p √Ω nghƒ©a th·ª±c t·∫ø. Hi·ªÉn th·ªã b·∫£n ƒë·ªì nhi·ªát t∆∞∆°ng quan g·∫ßn m√¥ t·∫£.

        ## üí° Th√¥ng tin Cu·ªëi c√πng & Khuy·∫øn ngh·ªã
        T√≥m t·∫Øt k·∫øt lu·∫≠n c·ªßa b·∫°n v·ªÅ h√†nh vi v√† hi·ªáu su·∫•t c·ªßa h·ªçc sinh.
        ƒê∆∞a ra c√°c khuy·∫øn ngh·ªã th·ª±c t·∫ø (v√≠ d·ª•: c·∫£i thi·ªán d·ªØ li·ªáu, lƒ©nh v·ª±c t·∫≠p trung, ƒë·ªÅ xu·∫•t ch√≠nh s√°ch).

        Ch·ªâ s·ª≠ d·ª•ng markdown. Kh√¥ng c√≥ danh s√°ch d·∫•u ƒë·∫ßu d√≤ng tr·ª´ khi t√≥m t·∫Øt c√°c h√†nh ƒë·ªông cu·ªëi c√πng.
        ƒê·ªô d√†i: kho·∫£ng 600-800 t·ª´.
        T√¥ng ƒëi·ªáu: ph√¢n t√≠ch, c√≥ c·∫•u tr√∫c, h·ªØu √≠ch cho c√°c b√™n li√™n quan.
    """) + f"""

B·ªëi c·∫£nh:
- Gi·ªõi thi·ªáu: {sections['introduction']}
- Ch·∫•t l∆∞·ª£ng D·ªØ li·ªáu: {sections['data_quality']}
- ƒê∆°n bi·∫øn: {[b['insight_after_chart'] for b in sections['univariate'] if 'insight_after_chart' in b]}
- T∆∞∆°ng quan: {sections['correlation']['insight_after_chart']}
- Th√¥ng tin Ch√≠nh: {sections['insights']}
- Khuy·∫øn ngh·ªã: {sections['recommendations']}
"""

init_db()

# Load all datasets
datasets = get_all_datasets()
if not datasets:
    st.warning("Vui l√≤ng t·∫£i l√™n m·ªôt b·ªô d·ªØ li·ªáu trong B·∫£ng ƒëi·ªÅu khi·ªÉn tr∆∞·ªõc.")
    st.stop()

# Dataset selection
dataset_options = {f"{d[0]} - {d[1]}": d for d in datasets}
selected = st.selectbox("Ch·ªçn b·ªô d·ªØ li·ªáu ƒë·ªÉ t·∫°o b√°o c√°o:", list(dataset_options.keys()))
dataset_id, name, rows, cols, uploaded, _ = dataset_options[selected]
file_path = os.path.join("data", "uploads", name)
df = safe_read_csv(file_path)

# Call LLM-generated EDA content
tabs = st.tabs(["üìò Gi·ªõi thi·ªáu", "üßº Ch·∫•t l∆∞·ª£ng D·ªØ li·ªáu", "üîç ƒê∆°n bi·∫øn", "üìä T∆∞∆°ng quan", "üí° Th√¥ng tin", "üìÑ B√°o c√°o ƒê·∫ßy ƒë·ªß"])
eda_sections = generate_eda_report_with_llm(df)

# --- üìò Introduction ---
with tabs[0]:
    st.markdown(eda_sections['introduction'])
    st.subheader("üìå Xem tr∆∞·ªõc B·ªô d·ªØ li·ªáu")
    st.dataframe(df.head(10))

# --- üßº Data Quality ---
with tabs[1]:
    st.markdown(eda_sections['data_quality'])
    st.subheader("Gi√° tr·ªã Thi·∫øu")
    missing = df.isnull().sum()
    missing = missing[missing > 0]
    if not missing.empty:
        st.dataframe(missing)
    else:
        st.success("Kh√¥ng ph√°t hi·ªán gi√° tr·ªã thi·∫øu.")
    st.subheader("H√†ng Tr√πng l·∫∑p")
    st.write(f"S·ªë h√†ng tr√πng l·∫∑p: **{df.duplicated().sum()}**")

    # Detailed per-column analysis
    st.subheader("üîé Ph√¢n t√≠ch theo C·ªôt")
    for col in df.columns:
        st.markdown(f"### üìå `{col}`")
        col_data = df[col]
        st.write(f"- Ki·ªÉu d·ªØ li·ªáu: `{col_data.dtype}`")
        st.write(f"- Gi√° tr·ªã thi·∫øu: `{col_data.isnull().sum()}` ({col_data.isnull().mean():.2%})")

        if pd.api.types.is_numeric_dtype(col_data):
            desc = col_data.describe()
            st.dataframe(desc.to_frame())
            try:
                fig, ax = plt.subplots()
                sns.histplot(col_data.dropna(), kde=True, ax=ax)
                ax.set_title(f"Ph√¢n ph·ªëi c·ªßa {col}")
                st.pyplot(fig)
            except Exception as e:
                st.warning(f"Kh√¥ng th·ªÉ v·∫Ω bi·ªÉu ƒë·ªì: {e}")
        elif pd.api.types.is_categorical_dtype(col_data) or col_data.dtype == object:
            value_counts = col_data.value_counts().head(10)
            st.dataframe(value_counts.to_frame(name='S·ªë l∆∞·ª£ng'))
            try:
                fig, ax = plt.subplots()
                sns.countplot(y=col_data, order=value_counts.index, ax=ax)
                ax.set_title(f"Gi√° tr·ªã h√†ng ƒë·∫ßu trong {col}")
                st.pyplot(fig)
            except Exception as e:
                st.warning(f"Kh√¥ng th·ªÉ v·∫Ω bi·ªÉu ƒë·ªì: {e}")

# --- üîç Univariate Analysis ---
with tabs[2]:
    for block in eda_sections['univariate']:
        st.markdown(block['insight'])
        st.code(block['code'], language='python')
        try:
            local_env = {"df": df, "plt": plt, "sns": sns}
            exec(block['code'], local_env)
            st.pyplot(plt.gcf())
            plt.clf()
            if 'insight_after_chart' in block:
                st.info(block['insight_after_chart'])
        except Exception as e:
            st.error(f"L·ªói khi hi·ªÉn th·ªã bi·ªÉu ƒë·ªì: {e}")

# --- üìä Correlation ---
with tabs[3]:
    st.markdown(eda_sections['correlation']['insight'])
    st.code(eda_sections['correlation']['code'], language='python')
    try:
        local_env = {"df": df, "plt": plt, "sns": sns}
        exec(eda_sections['correlation']['code'], local_env)
        st.pyplot(plt.gcf())
        plt.clf()
        if 'insight_after_chart' in eda_sections['correlation']:
            st.info(eda_sections['correlation']['insight_after_chart'])
    except Exception as e:
        st.error(f"L·ªói khi hi·ªÉn th·ªã b·∫£n ƒë·ªì nhi·ªát t∆∞∆°ng quan: {e}")


# --- üí° Insights ---
with tabs[4]:
    st.subheader("üîñ ƒêi·ªÉm ch√≠nh & Khuy·∫øn ngh·ªã")
    prompt_summary = f"""
        B·∫°n l√† m·ªôt nh√† ph√¢n t√≠ch d·ªØ li·ªáu chuy√™n nghi·ªáp. V·ªõi c√°c t√≥m t·∫Øt sau t·ª´ qu√° tr√¨nh EDA:

        1. Gi·ªõi thi·ªáu b·ªô d·ªØ li·ªáu:
        {eda_sections['introduction']}

        2. V·∫•n ƒë·ªÅ ch·∫•t l∆∞·ª£ng d·ªØ li·ªáu:
        {eda_sections['data_quality']}

        3. Th√¥ng tin ƒë∆°n bi·∫øn:
        {[b['insight_after_chart'] for b in eda_sections['univariate'] if 'insight_after_chart' in b]}

        4. Th√¥ng tin t∆∞∆°ng quan:
        {eda_sections['correlation']['insight_after_chart']}

        Vi·∫øt m·ªôt ƒëo·∫°n t√≥m t·∫Øt g·∫Øn k·∫øt (~200-300 t·ª´) m√†:
        - Gi·∫£i th√≠ch c√°c m√¥ h√¨nh ho·∫∑c v·∫•n ƒë·ªÅ trong b·ªô d·ªØ li·ªáu.
        - L√†m n·ªïi b·∫≠t c√°c m·ªëi quan h·ªá quan tr·ªçng.
        - ƒê·ªÅ c·∫≠p ƒë·∫øn nh·ªØng ph√°t hi·ªán b·∫•t ng·ªù.
        - ƒê·ªÅ xu·∫•t nh·ªØng th√¥ng tin c√≥ th·ªÉ h√†nh ƒë·ªông.

        K·∫øt th√∫c b·∫±ng m·ªôt danh s√°ch ng·∫Øn g·ªçn c√°c khuy·∫øn ngh·ªã ·ªü ƒë·ªãnh d·∫°ng d·∫•u ƒë·∫ßu d√≤ng.
        Tr·∫£ l·ªùi b·∫±ng markdown.
        """
    
    summary_response = llm.invoke([HumanMessage(content=prompt_summary)]).content
    st.markdown(summary_response)







# --- üìÑ Full Report ---
with tabs[5]:
    st.markdown("## üìÑ T√≥m t·∫Øt B√°o c√°o Cu·ªëi c√πng")

    # Render introduction + preview
    st.markdown("### üìò Gi·ªõi thi·ªáu")
    st.markdown(eda_sections['introduction'])
    st.dataframe(df.head())

    # Data Quality
    st.markdown("### üßº Ch·∫•t l∆∞·ª£ng D·ªØ li·ªáu")
    st.markdown(eda_sections['data_quality'])

    # Univariate
    st.markdown("### üîç Ph√¢n t√≠ch ƒê∆°n bi·∫øn")
    for block in eda_sections['univariate']:
        st.markdown(f"- {block['insight']}")
        st.code(block['code'], language="python")
        try:
            local_env = {"df": df, "plt": plt, "sns": sns}
            exec(block['code'], local_env)
            st.pyplot(plt.gcf())
            plt.clf()
            if 'insight_after_chart' in block:
                st.markdown(f"_{block['insight_after_chart']}_")
        except Exception as e:
            st.error(f"L·ªói: {e}")

    # Correlation
    st.markdown("### üìä Th√¥ng tin T∆∞∆°ng quan")
    st.markdown(eda_sections['correlation']['insight'])
    st.code(eda_sections['correlation']['code'], language="python")
    try:
        local_env = {"df": df, "plt": plt, "sns": sns}
        exec(eda_sections['correlation']['code'], local_env)
        st.pyplot(plt.gcf())
        plt.clf()
        st.markdown(f"_{eda_sections['correlation']['insight_after_chart']}_")
    except Exception as e:
        st.error(f"L·ªói b·∫£n ƒë·ªì nhi·ªát: {e}")

    # Final Summary from tab 4
    st.markdown("### üí° Th√¥ng tin Cu·ªëi c√πng & Khuy·∫øn ngh·ªã")
    st.markdown(summary_response)

    # Export Markdown Report
    st.markdown("### üì§ Xu·∫•t B√°o c√°o")

    # T·∫°o ph·∫ßn Univariate Markdown tr∆∞·ªõc ƒë·ªÉ tr√°nh l·ªói f-string v·ªõi \n
    univariate_md = ""
    for b in eda_sections['univariate']:
        univariate_md += f"- {b['insight']}\n\n```python\n{b['code']}\n```\n\n_{b.get('insight_after_chart', '')}_\n\n"

    # G·ªôp to√†n b·ªô b√°o c√°o (ch·ªâ ƒë·ªÉ xu·∫•t file, kh√¥ng hi·ªÉn th·ªã)
    full_report_md = f"""
## üìò Gi·ªõi thi·ªáu
{eda_sections['introduction']}

## üßº Ch·∫•t l∆∞·ª£ng D·ªØ li·ªáu
{eda_sections['data_quality']}

## üîç Ph√¢n t√≠ch ƒê∆°n bi·∫øn
{univariate_md}

## üìä Th√¥ng tin T∆∞∆°ng quan
{eda_sections['correlation']['insight']}

```python
{eda_sections['correlation']['code']}
```

_{eda_sections['correlation'].get('insight_after_chart', '')}_

## üí° Th√¥ng tin Cu·ªëi c√πng & Khuy·∫øn ngh·ªã
{summary_response}
"""

    # N√∫t t·∫£i xu·ªëng Markdown, kh√¥ng hi·ªÉn th·ªã n·ªôi dung
    # st.download_button(
    #     label="üì• T·∫£i xu·ªëng B√°o c√°o Markdown",
    #     data=full_report_md,
    #     file_name=f"EDA_Report_{name}.md",
    #     mime="text/markdown"
    # )


    # Export PDF
    pdf_bytes = export_eda_report_to_pdf(eda_sections, df, summary_response, dataset_name=name)
    st.download_button("üìÑ T·∫£i xu·ªëng B√°o c√°o PDF", pdf_bytes, file_name=f"EDA_Report_{name}.pdf", mime="application/pdf")



