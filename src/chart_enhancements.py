import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from src.models.llms import load_llm
from src.utils import get_all_datasets, get_dataset, safe_read_csv, add_chart_card
import numpy as np
import warnings
import time
import base64
warnings.filterwarnings('ignore')

st.set_page_config(page_title="üìà Bi·ªÉu ƒê·ªì Th√¥ng Minh N√¢ng Cao", layout="wide")

# Professional styling with modern color schemes
st.markdown("""
<style>
    .chart-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 2rem;
        border-radius: 15px;
        color: white;
        margin-bottom: 2rem;
        text-align: center;
    }
    .recommendation-card {
        background: linear-gradient(135deg, #56CCF2 0%, #2F80ED 100%);
        padding: 1.5rem;
        border-radius: 10px;
        color: white;
        margin: 1rem 0;
        box-shadow: 0 4px 15px rgba(0,0,0,0.2);
    }
    .chart-option {
        background: #f8f9fa;
        padding: 1rem;
        border-radius: 8px;
        border: 2px solid transparent;
        margin: 0.5rem 0;
        cursor: pointer;
        transition: all 0.3s ease;
    }
    .chart-option:hover {
        border-color: #667eea;
        box-shadow: 0 2px 8px rgba(102, 126, 234, 0.2);
    }
    .color-palette {
        display: flex;
        gap: 10px;
        margin: 10px 0;
    }
    .color-box {
        width: 30px;
        height: 30px;
        border-radius: 5px;
        border: 2px solid white;
        box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    }
    .success-message {
        background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
        color: white;
        padding: 1rem;
        border-radius: 8px;
        margin: 1rem 0;
    }
    .loading-container {
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 2rem;
        background: #f8f9fa;
        border-radius: 10px;
        margin: 1rem 0;
    }
    .loading-spinner {
        border: 4px solid #f3f3f3;
        border-top: 4px solid #667eea;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        animation: spin 1s linear infinite;
        margin-right: 1rem;
    }
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>
""", unsafe_allow_html=True)

st.markdown('<div class="chart-header"><h1>üìà C√¥ng C·ª• T·∫°o Bi·ªÉu ƒê·ªì Th√¥ng Minh AI</h1><p>Nh·∫≠n ƒë·ªÅ xu·∫•t bi·ªÉu ƒë·ªì th√¥ng minh v√† t·∫°o ra c√°c tr·ª±c quan h√≥a tuy·ªát ƒë·∫πp</p></div>', unsafe_allow_html=True)

llm = load_llm("gpt-3.5-turbo")

# Enhanced color palettes
COLOR_PALETTES = {
    "Xanh Chuy√™n Nghi·ªáp": ["#1f77b4", "#ff7f0e", "#2ca02c", "#d62728", "#9467bd", "#8c564b", "#e377c2", "#7f7f7f", "#bcbd22", "#17becf"],
    "S·ªëng ƒê·ªông": ["#FF6B6B", "#4ECDC4", "#45B7D1", "#96CEB4", "#FFEAA7", "#DDA0DD", "#98D8C8", "#F7DC6F", "#BB8FCE", "#85C1E9"],
    "Doanh Nghi·ªáp": ["#2C3E50", "#3498DB", "#E74C3C", "#F39C12", "#27AE60", "#8E44AD", "#16A085", "#E67E22", "#34495E", "#1ABC9C"],
    "Ho√†ng H√¥n": ["#FF6B35", "#F7931E", "#FFD23F", "#06FFA5", "#118AB2", "#073B4C", "#E63946", "#F77F00", "#FCBF49", "#003566"],
    "ƒê·∫°i D∆∞∆°ng": ["#0077BE", "#00A8CC", "#0FA3B1", "#B5E2FA", "#F9E784", "#F8AD9D", "#F4975A", "#E8871E", "#DA627D", "#A53860"],
    "T·ª± Nhi√™n": ["#8FBC8F", "#32CD32", "#228B22", "#006400", "#9ACD32", "#ADFF2F", "#7CFC00", "#7FFF00", "#98FB98", "#90EE90"],
    "Gradient T√≠m": ["#9C27B0", "#8E24AA", "#7B1FA2", "#673AB7", "#5E35B1", "#512DA8", "#4527A0", "#3F51B5", "#3949AB", "#303F9F"]
}

# Load datasets
datasets = get_all_datasets()
if not datasets:
    st.warning("‚ö†Ô∏è Vui l√≤ng t·∫£i l√™n b·ªô d·ªØ li·ªáu t·ª´ trang B·∫£ng ƒëi·ªÅu khi·ªÉn.")
    st.stop()

dataset_options = {f"{d[0]} - {d[1]}": d[0] for d in datasets}
selected = st.selectbox("üìÇ Ch·ªçn b·ªô d·ªØ li·ªáu ƒë·ªÉ ph√¢n t√≠ch:", list(dataset_options.keys()))
dataset_id = dataset_options[selected]
dataset = get_dataset(dataset_id)
file_path = dataset[2]

@st.cache_data
def load_csv(file_path):
    for enc in ['utf-8', 'ISO-8859-1', 'utf-16', 'cp1252']:
        try:
            return pd.read_csv(file_path, encoding=enc)
        except:
            continue
    raise ValueError("‚ùå Kh√¥ng th·ªÉ gi·∫£i m√£ file CSV.")

df = load_csv(file_path)
st.markdown(f"**üßæ Th√¥ng tin B·ªô d·ªØ li·ªáu:** `{dataset[1]}` ‚Äî {df.shape[0]:,} h√†ng √ó {df.shape[1]} c·ªôt")

def get_chart_recommendations(df, user_intent=""):
    """Enhanced AI-powered chart recommendations"""
    numeric_cols = df.select_dtypes(include=[np.number]).columns.tolist()
    categorical_cols = df.select_dtypes(include=['object', 'category']).columns.tolist()
    datetime_cols = [col for col in df.columns if any(keyword in col.lower() for keyword in ['date', 'time', 'year', 'month'])]
    
    recommendations = []
    
    if len(numeric_cols) >= 2:
        recommendations.append({
            "type": "Bi·ªÉu ƒê·ªì Ph√¢n T√°n",
            "description": f"Kh√°m ph√° m·ªëi quan h·ªá gi·ªØa {numeric_cols[0]} v√† {numeric_cols[1]}",
            "confidence": 0.9,
            "suggested_x": numeric_cols[0],
            "suggested_y": numeric_cols[1],
            "icon": "üîµ",
            "color_scheme": "Xanh Chuy√™n Nghi·ªáp"
        })
        
        recommendations.append({
            "type": "B·∫£n ƒê·ªì Nhi·ªát T∆∞∆°ng Quan",
            "description": "Hi·ªÉn th·ªã t∆∞∆°ng quan gi·ªØa t·∫•t c·∫£ c√°c bi·∫øn s·ªë",
            "confidence": 0.85,
            "suggested_x": "T·∫•t c·∫£ bi·∫øn s·ªë",
            "suggested_y": "T·∫•t c·∫£ bi·∫øn s·ªë",
            "icon": "üî•",
            "color_scheme": "Ho√†ng H√¥n"
        })
    
    if categorical_cols and numeric_cols:
        recommendations.append({
            "type": "Bi·ªÉu ƒê·ªì H·ªôp",
            "description": f"So s√°nh ph√¢n ph·ªëi {numeric_cols[0]} theo {categorical_cols[0]}",
            "confidence": 0.8,
            "suggested_x": categorical_cols[0],
            "suggested_y": numeric_cols[0],
            "icon": "üì¶",
            "color_scheme": "S·ªëng ƒê·ªông"
        })
        
        recommendations.append({
            "type": "Bi·ªÉu ƒê·ªì C·ªôt",
            "description": f"Hi·ªÉn th·ªã gi√° tr·ªã trung b√¨nh {numeric_cols[0]} theo {categorical_cols[0]}",
            "confidence": 0.75,
            "suggested_x": categorical_cols[0],
            "suggested_y": numeric_cols[0],
            "icon": "üìä",
            "color_scheme": "Doanh Nghi·ªáp"
        })
    
    if datetime_cols and numeric_cols:
        recommendations.append({
            "type": "Chu·ªói Th·ªùi Gian",
            "description": f"Theo d√µi thay ƒë·ªïi {numeric_cols[0]} theo {datetime_cols[0]}",
            "confidence": 0.95,
            "suggested_x": datetime_cols[0],
            "suggested_y": numeric_cols[0],
            "icon": "üìà",
            "color_scheme": "ƒê·∫°i D∆∞∆°ng"
        })
    
    if categorical_cols:
        recommendations.append({
            "type": "Bi·ªÉu ƒê·ªì Tr√≤n",
            "description": f"Hi·ªÉn th·ªã t·ª∑ l·ªá c·ªßa {categorical_cols[0]}",
            "confidence": 0.7,
            "suggested_x": categorical_cols[0],
            "suggested_y": "ƒê·∫øm",
            "icon": "ü•ß",
            "color_scheme": "T·ª± Nhi√™n"
        })
    
    recommendations.sort(key=lambda x: x['confidence'], reverse=True)
    return recommendations[:6]

def create_enhanced_chart(chart_type, df, x_col, y_col, color_col=None, palette="Xanh Chuy√™n Nghi·ªáp", custom_prompt=""):
    """Create enhanced charts with proper data validation and error handling"""
    try:
        colors = COLOR_PALETTES[palette]
        fig = None
        code = ""
        
        # Data validation
        if x_col not in df.columns or (y_col != "ƒê·∫øm" and y_col not in df.columns):
            st.error(f"‚ùå C·ªôt kh√¥ng t·ªìn t·∫°i: {x_col} ho·∫∑c {y_col}")
            return None, ""
        
        # Clean data
        working_df = df.copy()
        
        if chart_type == "Bi·ªÉu ƒê·ªì Ph√¢n T√°n":
            # Ensure both columns are numeric
            if pd.api.types.is_numeric_dtype(working_df[x_col]) and pd.api.types.is_numeric_dtype(working_df[y_col]):
                fig = px.scatter(
                    working_df, 
                    x=x_col, 
                    y=y_col, 
                    color=color_col if color_col and color_col != "Kh√¥ng" else None,
                    color_discrete_sequence=colors,
                    title=f"Bi·ªÉu ƒê·ªì Ph√¢n T√°n: {x_col} vs {y_col}",
                    template="plotly_white",
                    hover_data=[x_col, y_col]
                )
                
                code = f"""
import plotly.express as px

fig = px.scatter(df, x='{x_col}', y='{y_col}', 
                color='{color_col}' if '{color_col}' != 'Kh√¥ng' and '{color_col}' else None,
                color_discrete_sequence={colors},
                title="Bi·ªÉu ƒê·ªì Ph√¢n T√°n: {x_col} vs {y_col}",
                template="plotly_white")
fig.show()
"""
            else:
                st.error("‚ùå Bi·ªÉu ƒë·ªì ph√¢n t√°n c·∫ßn c·∫£ hai c·ªôt ƒë·ªÅu l√† s·ªë")
                return None, ""
        
        elif chart_type == "Bi·ªÉu ƒê·ªì C·ªôt":
            if working_df[x_col].dtype == 'object' or pd.api.types.is_categorical_dtype(working_df[x_col]):
                # Group categorical data
                if pd.api.types.is_numeric_dtype(working_df[y_col]):
                    agg_df = working_df.groupby(x_col)[y_col].agg(['mean', 'count']).reset_index()
                    agg_df.columns = [x_col, f'Mean_{y_col}', 'Count']
                    
                    fig = px.bar(
                        agg_df, 
                        x=x_col, 
                        y=f'Mean_{y_col}',
                        color=x_col,
                        color_discrete_sequence=colors,
                        title=f"Bi·ªÉu ƒê·ªì C·ªôt: Trung b√¨nh {y_col} theo {x_col}",
                        template="plotly_white",
                        text=f'Mean_{y_col}'
                    )
                    fig.update_traces(texttemplate='%{text:.2f}', textposition='outside')
                else:
                    # Count plot for categorical y
                    value_counts = working_df[x_col].value_counts().reset_index()
                    value_counts.columns = [x_col, 'Count']
                    
                    fig = px.bar(
                        value_counts, 
                        x=x_col, 
                        y='Count',
                        color=x_col,
                        color_discrete_sequence=colors,
                        title=f"Bi·ªÉu ƒê·ªì C·ªôt: S·ªë l∆∞·ª£ng theo {x_col}",
                        template="plotly_white",
                        text='Count'
                    )
                    fig.update_traces(texttemplate='%{text}', textposition='outside')
            else:
                # Numeric x-axis - create bins
                working_df['binned'] = pd.cut(working_df[x_col], bins=10)
                agg_df = working_df.groupby('binned')[y_col].mean().reset_index()
                
                fig = px.bar(
                    agg_df, 
                    x='binned', 
                    y=y_col,
                    color_discrete_sequence=colors,
                    title=f"Bi·ªÉu ƒê·ªì C·ªôt: {y_col} theo nh√≥m {x_col}",
                    template="plotly_white"
                )
            
            # Update layout for better spacing
            fig.update_layout(
                xaxis={'categoryorder': 'total descending'},
                bargap=0.2,
                bargroupgap=0.1
            )
            
            code = f"""
import plotly.express as px

if df['{x_col}'].dtype == 'object':
    agg_df = df.groupby('{x_col}')['{y_col}'].mean().reset_index()
    fig = px.bar(agg_df, x='{x_col}', y='{y_col}',
                color='{x_col}',
                color_discrete_sequence={colors},
                title="Bi·ªÉu ƒê·ªì C·ªôt: {y_col} theo {x_col}",
                template="plotly_white")
else:
    df['binned'] = pd.cut(df['{x_col}'], bins=10)
    agg_df = df.groupby('binned')['{y_col}'].mean().reset_index()
    fig = px.bar(agg_df, x='binned', y='{y_col}',
                color_discrete_sequence={colors},
                title="Bi·ªÉu ƒê·ªì C·ªôt: {y_col} theo {x_col}",
                template="plotly_white")

fig.update_layout(bargap=0.2, bargroupgap=0.1)
fig.show()
"""
        
        elif chart_type == "Bi·ªÉu ƒê·ªì H·ªôp":
            fig = px.box(
                working_df, 
                x=x_col, 
                y=y_col, 
                color=color_col if color_col and color_col != "Kh√¥ng" else None,
                color_discrete_sequence=colors,
                title=f"Bi·ªÉu ƒê·ªì H·ªôp: Ph√¢n ph·ªëi {y_col} theo {x_col}",
                template="plotly_white",
                points="outliers"
            )
            
            code = f"""
import plotly.express as px

fig = px.box(df, x='{x_col}', y='{y_col}', 
            color='{color_col}' if '{color_col}' != 'Kh√¥ng' and '{color_col}' else None,
            color_discrete_sequence={colors},
            title="Bi·ªÉu ƒê·ªì H·ªôp: Ph√¢n ph·ªëi {y_col} theo {x_col}",
            template="plotly_white",
            points="outliers")
fig.show()
"""
        
        elif chart_type == "Chu·ªói Th·ªùi Gian":
            # Convert to datetime if needed
            if not pd.api.types.is_datetime64_any_dtype(working_df[x_col]):
                working_df[x_col] = pd.to_datetime(working_df[x_col], errors='coerce')
            
            # Remove invalid dates
            working_df = working_df.dropna(subset=[x_col])
            
            if len(working_df) == 0:
                st.error("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu th·ªùi gian h·ª£p l·ªá")
                return None, ""
            
            fig = px.line(
                working_df, 
                x=x_col, 
                y=y_col,
                color=color_col if color_col and color_col != "Kh√¥ng" else None,
                color_discrete_sequence=colors,
                title=f"Chu·ªói Th·ªùi Gian: {y_col} theo {x_col}",
                template="plotly_white",
                markers=True
            )
            
            code = f"""
import plotly.express as px
import pandas as pd

df['{x_col}'] = pd.to_datetime(df['{x_col}'], errors='coerce')
df_clean = df.dropna(subset=['{x_col}'])

fig = px.line(df_clean, x='{x_col}', y='{y_col}',
             color='{color_col}' if '{color_col}' != 'Kh√¥ng' and '{color_col}' else None,
             color_discrete_sequence={colors},
             title="Chu·ªói Th·ªùi Gian: {y_col} theo {x_col}",
             template="plotly_white",
             markers=True)
fig.show()
"""
        
        elif chart_type == "B·∫£n ƒê·ªì Nhi·ªát T∆∞∆°ng Quan":
            numeric_df = working_df.select_dtypes(include=[np.number])
            if len(numeric_df.columns) < 2:
                st.error("‚ùå C·∫ßn √≠t nh·∫•t 2 c·ªôt s·ªë ƒë·ªÉ t·∫°o b·∫£n ƒë·ªì nhi·ªát t∆∞∆°ng quan")
                return None, ""
            
            corr_matrix = numeric_df.corr()
            
            # Enhanced color scale options
            color_scales = {
                "Xanh Chuy√™n Nghi·ªáp": "RdBu_r",
                "S·ªëng ƒê·ªông": "Viridis",
                "Doanh Nghi·ªáp": "Blues",
                "Ho√†ng H√¥n": "Sunset",
                "ƒê·∫°i D∆∞∆°ng": "thermal",
                "T·ª± Nhi√™n": "Greens",
                "Gradient T√≠m": "Purples"
            }
            
            color_scale = color_scales.get(palette, "RdBu_r")
            
            fig = px.imshow(
                corr_matrix, 
                color_continuous_scale=color_scale,
                title="B·∫£n ƒê·ªì Nhi·ªát T∆∞∆°ng Quan",
                template="plotly_white",
                aspect="auto",
                text_auto=True
            )
            
            fig.update_layout(
                width=800,
                height=600,
                xaxis_title="Bi·∫øn",
                yaxis_title="Bi·∫øn"
            )
            
            code = f"""
import plotly.express as px

numeric_df = df.select_dtypes(include=[np.number])
corr_matrix = numeric_df.corr()

fig = px.imshow(corr_matrix, 
               color_continuous_scale="{color_scale}",
               title="B·∫£n ƒê·ªì Nhi·ªát T∆∞∆°ng Quan",
               template="plotly_white",
               text_auto=True)
fig.show()
"""
        
        elif chart_type == "Bi·ªÉu ƒê·ªì Tr√≤n":
            # Enhanced pie chart logic
            if working_df[x_col].dtype == 'object' or pd.api.types.is_categorical_dtype(working_df[x_col]):
                value_counts = working_df[x_col].value_counts().head(10)
                
                fig = px.pie(
                    values=value_counts.values, 
                    names=value_counts.index,
                    color_discrete_sequence=colors,
                    title=f"Ph√¢n ph·ªëi c·ªßa {x_col}",
                    template="plotly_white",
                    hole=0.3  # Donut chart for modern look
                )
                
                fig.update_traces(
                    textposition='inside', 
                    textinfo='percent+label',
                    hovertemplate='<b>%{label}</b><br>S·ªë l∆∞·ª£ng: %{value}<br>T·ª∑ l·ªá: %{percent}<extra></extra>'
                )
            else:
                # For numeric data, create bins
                working_df['binned'] = pd.cut(working_df[x_col], bins=5)
                value_counts = working_df['binned'].value_counts()
                
                fig = px.pie(
                    values=value_counts.values, 
                    names=[str(x) for x in value_counts.index],
                    color_discrete_sequence=colors,
                    title=f"Ph√¢n ph·ªëi nh√≥m c·ªßa {x_col}",
                    template="plotly_white",
                    hole=0.3
                )
            
            code = f"""
import plotly.express as px

if df['{x_col}'].dtype == 'object':
    value_counts = df['{x_col}'].value_counts().head(10)
    fig = px.pie(values=value_counts.values, names=value_counts.index,
                color_discrete_sequence={colors},
                title="Ph√¢n ph·ªëi c·ªßa {x_col}",
                template="plotly_white",
                hole=0.3)
else:
    df['binned'] = pd.cut(df['{x_col}'], bins=5)
    value_counts = df['binned'].value_counts()
    fig = px.pie(values=value_counts.values, names=value_counts.index,
                color_discrete_sequence={colors},
                title="Ph√¢n ph·ªëi nh√≥m c·ªßa {x_col}",
                template="plotly_white",
                hole=0.3)

fig.update_traces(textposition='inside', textinfo='percent+label')
fig.show()
"""
        
        # Apply custom styling to all charts
        if fig:
            fig.update_layout(
                font=dict(size=12, family="Arial, sans-serif"),
                plot_bgcolor='rgba(0,0,0,0)',
                paper_bgcolor='rgba(0,0,0,0)',
                title=dict(x=0.5, font=dict(size=16, color='#2c3e50')),
                margin=dict(t=60, l=60, r=60, b=60),
                showlegend=True,
                legend=dict(
                    orientation="v",
                    yanchor="top",
                    y=1,
                    xanchor="left",
                    x=1.02
                )
            )
            
            # Add custom styling based on prompt
            if custom_prompt:
                fig.add_annotation(
                    text=f"T√πy ch·ªânh: {custom_prompt}",
                    xref="paper", yref="paper",
                    x=0.02, y=0.98,
                    showarrow=False,
                    font=dict(size=10, color="gray")
                )
        
        return fig, code
        
    except Exception as e:
        st.error(f"‚ùå L·ªói khi t·∫°o bi·ªÉu ƒë·ªì: {str(e)}")
        return None, ""

def save_chart_to_session(fig, code, chart_type, description):
    """Save chart data to session state"""
    if 'saved_charts' not in st.session_state:
        st.session_state.saved_charts = []
    
    chart_data = {
        'figure': fig,
        'code': code,
        'type': chart_type,
        'description': description,
        'timestamp': time.strftime("%Y-%m-%d %H:%M:%S")
    }
    
    st.session_state.saved_charts.append(chart_data)

def download_chart_as_png(fig, filename):
    """Convert plotly figure to PNG and provide download"""
    try:
        # Convert to PNG bytes
        img_bytes = fig.to_image(format="png", width=1200, height=800, scale=2)
        
        # Encode to base64 for download
        b64 = base64.b64encode(img_bytes).decode()
        
        # Create download link
        href = f'<a href="data:image/png;base64,{b64}" download="{filename}.png">üì• T·∫£i PNG</a>'
        return href, img_bytes
    except Exception as e:
        st.error(f"‚ùå L·ªói khi t·∫°o PNG: {str(e)}")
        return None, None

# Main interface
col1, col2 = st.columns([1, 2])

with col1:
    st.subheader("üéØ ƒê·ªÅ xu·∫•t Bi·ªÉu ƒë·ªì AI")
    
    user_intent = st.text_input("üí≠ B·∫°n mu·ªën k·ªÉ c√¢u chuy·ªán g√¨?", 
                               placeholder="v√≠ d·ª•: hi·ªÉn th·ªã xu h∆∞·ªõng, so s√°nh danh m·ª•c, t√¨m ngo·∫°i l·ªá...")
    
    recommendations = get_chart_recommendations(df, user_intent)
    
    st.markdown("### ü§ñ Bi·ªÉu ƒë·ªì ƒê∆∞·ª£c ƒë·ªÅ xu·∫•t")
    for i, rec in enumerate(recommendations):
        with st.container():
            st.markdown(f"""
            <div class="chart-option">
                <h4>{rec['icon']} {rec['type']}</h4>
                <p>{rec['description']}</p>
                <small>ƒê·ªô tin c·∫≠y: {rec['confidence']:.0%} | M√†u s·∫Øc: {rec['color_scheme']}</small>
            </div>
            """, unsafe_allow_html=True)
            
            if st.button(f"S·ª≠ d·ª•ng {rec['type']}", key=f"rec_{i}"):
                st.session_state.selected_chart = rec
                st.session_state.auto_x = rec['suggested_x']
                st.session_state.auto_y = rec['suggested_y']
                st.session_state.auto_palette = rec['color_scheme']
                st.rerun()

with col2:
    st.subheader("‚öôÔ∏è C·∫•u h√¨nh Bi·ªÉu ƒë·ªì")
    
    # Chart type selection
    chart_types = ["Bi·ªÉu ƒê·ªì Ph√¢n T√°n", "Bi·ªÉu ƒê·ªì C·ªôt", "Bi·ªÉu ƒê·ªì H·ªôp", "Chu·ªói Th·ªùi Gian", "B·∫£n ƒê·ªì Nhi·ªát T∆∞∆°ng Quan", "Bi·ªÉu ƒê·ªì Tr√≤n"]
    selected_chart_type = st.selectbox("üìä Lo·∫°i Bi·ªÉu ƒë·ªì:", chart_types, 
                                      index=chart_types.index(st.session_state.get('selected_chart', {}).get('type', 'Bi·ªÉu ƒê·ªì Ph√¢n T√°n')) if st.session_state.get('selected_chart', {}).get('type') in chart_types else 0)
    
    # Column selection with validation
    col_a, col_b = st.columns(2)
    with col_a:
        x_axis = st.selectbox("Tr·ª•c X:", df.columns.tolist(), 
                             index=df.columns.tolist().index(st.session_state.get('auto_x', df.columns[0])) if st.session_state.get('auto_x') in df.columns else 0)
    
    with col_b:
        if selected_chart_type in ["Bi·ªÉu ƒê·ªì Tr√≤n"]:
            y_axis = "ƒê·∫øm"
            st.markdown("**Tr·ª•c Y:** ƒê·∫øm (t·ª± ƒë·ªông)")
        else:
            available_cols = df.columns.tolist()
            if selected_chart_type in ["Bi·ªÉu ƒê·ªì Ph√¢n T√°n", "Bi·ªÉu ƒê·ªì H·ªôp", "Chu·ªói Th·ªùi Gian"]:
                numeric_cols = df.select_dtypes(include=['number']).columns.tolist()
                if numeric_cols:
                    available_cols = numeric_cols
            
            y_axis = st.selectbox("Tr·ª•c Y:", available_cols,
                                 index=available_cols.index(st.session_state.get('auto_y', available_cols[0])) if st.session_state.get('auto_y') in available_cols else 0)
    
    # Color grouping
    categorical_cols = df.select_dtypes(include=['object', 'category']).columns.tolist()
    color_by = st.selectbox("üé® M√†u theo:", ["Kh√¥ng"] + categorical_cols)
    
    # Color palette selection
    palette_name = st.selectbox("üé® B·∫£ng M√†u:", list(COLOR_PALETTES.keys()),
                               index=list(COLOR_PALETTES.keys()).index(st.session_state.get('auto_palette', 'Xanh Chuy√™n Nghi·ªáp')))
    
    # Display color preview
    st.markdown("**Xem tr∆∞·ªõc M√†u s·∫Øc:**")
    palette_html = '<div class="color-palette">'
    for color in COLOR_PALETTES[palette_name][:8]:
        palette_html += f'<div class="color-box" style="background-color: {color}"></div>'
    palette_html += '</div>'
    st.markdown(palette_html, unsafe_allow_html=True)
    
    # Custom design prompt
    custom_prompt = st.text_area("‚ú® H∆∞·ªõng d·∫´n Thi·∫øt k·∫ø B·ªï sung:", 
                                placeholder="v√≠ d·ª•: th√™m ƒë∆∞·ªùng xu h∆∞·ªõng, s·ª≠ d·ª•ng thang log, l√†m n·ªïi b·∫≠t ngo·∫°i l·ªá, th√™m ch√∫ th√≠ch...")
    
    # Generate chart button with loading
    if st.button("üöÄ T·∫°o Bi·ªÉu ƒë·ªì", type="primary"):
        # Show loading
        loading_placeholder = st.empty()
        with loading_placeholder:
            st.markdown("""
            <div class="loading-container">
                <div class="loading-spinner"></div>
                <span>ƒêang t·∫°o tr·ª±c quan h√≥a c·ªßa b·∫°n...</span>
            </div>
            """, unsafe_allow_html=True)
        
        # Simulate processing time
        time.sleep(1)
        
        try:
            fig, code = create_enhanced_chart(
                selected_chart_type, df, x_axis, y_axis, 
                color_by if color_by != "Kh√¥ng" else None,
                palette_name, custom_prompt
            )
            
            if fig:
                st.session_state.current_fig = fig
                st.session_state.current_code = code
                st.session_state.chart_generated = True
                st.session_state.current_chart_type = selected_chart_type
                st.session_state.current_description = f"{selected_chart_type} hi·ªÉn th·ªã {x_axis} vs {y_axis}"
                
                # Clear loading
                loading_placeholder.empty()
                
                # Show success message
                st.markdown("""
                <div class="success-message">
                    ‚úÖ Bi·ªÉu ƒë·ªì ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!
                </div>
                """, unsafe_allow_html=True)
                
                st.rerun()
            else:
                loading_placeholder.empty()
                st.error("‚ùå Kh√¥ng th·ªÉ t·∫°o bi·ªÉu ƒë·ªì. Vui l√≤ng ki·ªÉm tra d·ªØ li·ªáu v√† th·ª≠ l·∫°i.")
                
        except Exception as e:
            loading_placeholder.empty()
            st.error(f"‚ùå L·ªói khi t·∫°o bi·ªÉu ƒë·ªì: {str(e)}")

# Display generated chart
if st.session_state.get('chart_generated', False):
    st.subheader("üìä Tr·ª±c quan h√≥a ƒê√£ t·∫°o")
    
    # Chart display with enhanced layout
    chart_col, controls_col = st.columns([3, 1])
    
    with chart_col:
        # Display the chart
        st.plotly_chart(st.session_state.current_fig, use_container_width=True, key="main_chart")
        
        # AI Insights generation
        with st.spinner("üîç ƒêang t·∫°o insights AI..."):
            insight_prompt = f"""
            Ph√¢n t√≠ch bi·ªÉu ƒë·ªì {st.session_state.get('current_chart_type', 'n√†y')} hi·ªÉn th·ªã {x_axis} vs {y_axis} t·ª´ b·ªô d·ªØ li·ªáu.
            
            Th√¥ng tin b·ªô d·ªØ li·ªáu:
            - K√≠ch th∆∞·ªõc: {df.shape}
            - Lo·∫°i bi·ªÉu ƒë·ªì: {st.session_state.get('current_chart_type')}
            - Tr·ª•c X: {x_axis} ({df[x_axis].dtype})
            - Tr·ª•c Y: {y_axis if y_axis != "ƒê·∫øm" else "S·ªë l∆∞·ª£ng"}
            
            Cung c·∫•p 3-5 insights c·ª• th·ªÉ v·ªÅ:
            1. C√°c m·∫´u ho·∫∑c xu h∆∞·ªõng ch√≠nh c√≥ th·ªÉ nh√¨n th·∫•y
            2. Ngo·∫°i l·ªá ho·∫∑c ƒëi·ªÉm d·ªØ li·ªáu th√∫ v·ªã
            3. √ù nghƒ©a kinh doanh ti·ªÅm nƒÉng
            4. ƒê·ªÅ xu·∫•t ph√¢n t√≠ch ti·∫øp theo
            
            H√£y c·ª• th·ªÉ v√† c√≥ th·ªÉ h√†nh ƒë·ªông. Bao g·ªìm c√°c con s·ªë th·ª±c t·∫ø khi c√≥ th·ªÉ.
            Tr·∫£ l·ªùi b·∫±ng markdown v·ªõi format ƒë·∫πp.
            """
            
            insights = llm.invoke(insight_prompt)
            
            st.markdown("### üß† Insights ƒê∆∞·ª£c t·∫°o b·ªüi AI")
            st.markdown(f"""
            <div class="recommendation-card">
                {insights}
            </div>
            """, unsafe_allow_html=True)
    
    with controls_col:
        st.markdown("#### üé® T√πy ch·ªçn Bi·ªÉu ƒë·ªì")
        
        # Chart enhancement options
        if st.button("üîÑ T·∫°o l·∫°i v·ªõi c√†i ƒë·∫∑t m·ªõi", use_container_width=True):
            # Clear current chart to force regeneration
            if 'chart_generated' in st.session_state:
                del st.session_state['chart_generated']
            st.rerun()
        
        st.markdown("#### üíæ L∆∞u & Xu·∫•t")
        
        # Save chart functionality - FIXED
        if st.button("üíæ L∆∞u Bi·ªÉu ƒë·ªì", use_container_width=True, key="save_chart_btn"):
            try:
                # Save to database
                add_chart_card(
                    dataset_id, 
                    f"Bi·ªÉu ƒë·ªì: {st.session_state.get('current_chart_type')}", 
                    st.session_state.get('current_description', ''), 
                    st.session_state.get('current_code', '')
                )
                
                # Save to session for immediate access
                save_chart_to_session(
                    st.session_state.current_fig,
                    st.session_state.current_code,
                    st.session_state.get('current_chart_type'),
                    st.session_state.get('current_description')
                )
                
                st.success("‚úÖ Bi·ªÉu ƒë·ªì ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng!")
                time.sleep(1)
                
            except Exception as e:
                st.error(f"‚ùå L·ªói khi l∆∞u bi·ªÉu ƒë·ªì: {str(e)}")
        
        # Download PNG functionality - FIXED
        if st.button("üì• T·∫£i PNG", use_container_width=True, key="download_png_btn"):
            try:
                with st.spinner("üîÑ ƒêang t·∫°o file PNG..."):
                    filename = f"chart_{int(time.time())}"
                    download_link, img_bytes = download_chart_as_png(st.session_state.current_fig, filename)
                    
                    if download_link:
                        # Provide direct download
                        st.download_button(
                            label="üì• T·∫£i PNG",
                            data=img_bytes,
                            file_name=f"{filename}.png",
                            mime="image/png",
                            key="png_download_btn"
                        )
                        st.success("‚úÖ File PNG ƒë√£ s·∫µn s√†ng ƒë·ªÉ t·∫£i!")
                    else:
                        st.error("‚ùå Kh√¥ng th·ªÉ t·∫°o file PNG")
                        
            except Exception as e:
                st.error(f"‚ùå L·ªói khi t·∫°o PNG: {str(e)}")
        
        # Create Dashboard functionality - FIXED  
        if st.button("üìä T·∫°o Dashboard", use_container_width=True, key="create_dashboard_btn"):
            try:
                with st.spinner("üîÑ ƒêang t·∫°o dashboard..."):
                    # Create a multi-chart dashboard
                    dashboard_fig = make_subplots(
                        rows=2, cols=2,
                        subplot_titles=[
                            f'Bi·ªÉu ƒë·ªì ch√≠nh: {st.session_state.get("current_chart_type")}',
                            'Th·ªëng k√™ t√≥m t·∫Øt',
                            'Ph√¢n ph·ªëi d·ªØ li·ªáu',
                            'Xu h∆∞·ªõng theo th·ªùi gian'
                        ],
                        specs=[[{"secondary_y": False}, {"secondary_y": False}],
                               [{"secondary_y": False}, {"secondary_y": False}]],
                        vertical_spacing=0.12,
                        horizontal_spacing=0.1
                    )
                    
                    # Add main chart (simplified version)
                    if st.session_state.get('current_chart_type') == 'Bi·ªÉu ƒê·ªì C·ªôt':
                        if df[x_axis].dtype == 'object':
                            agg_data = df.groupby(x_axis)[y_axis].mean().head(5)
                            dashboard_fig.add_trace(
                                go.Bar(x=agg_data.index, y=agg_data.values, name="Ch√≠nh"),
                                row=1, col=1
                            )
                    
                    # Add summary statistics
                    numeric_cols = df.select_dtypes(include=[np.number]).columns[:3]
                    if len(numeric_cols) > 0:
                        summary_data = df[numeric_cols].mean()
                        dashboard_fig.add_trace(
                            go.Bar(x=summary_data.index, y=summary_data.values, name="Trung b√¨nh"),
                            row=1, col=2
                        )
                    
                    # Add distribution chart
                    if len(numeric_cols) > 0:
                        dashboard_fig.add_trace(
                            go.Histogram(x=df[numeric_cols[0]], name="Ph√¢n ph·ªëi"),
                            row=2, col=1
                        )
                    
                    # Add trend if date column exists
                    date_cols = [col for col in df.columns if any(keyword in col.lower() for keyword in ['date', 'time'])]
                    if date_cols and len(numeric_cols) > 0:
                        df_sorted = df.sort_values(date_cols[0])
                        dashboard_fig.add_trace(
                            go.Scatter(x=df_sorted[date_cols[0]], y=df_sorted[numeric_cols[0]], 
                                     mode='lines', name="Xu h∆∞·ªõng"),
                            row=2, col=2
                        )
                    
                    dashboard_fig.update_layout(
                        height=800,
                        title_text=f"Dashboard: {dataset[1]}",
                        showlegend=True,
                        template="plotly_white"
                    )
                    
                    # Store dashboard
                    st.session_state.dashboard_fig = dashboard_fig
                    
                st.success("‚úÖ Dashboard ƒë√£ ƒë∆∞·ª£c t·∫°o!")
                
                # Show dashboard
                st.plotly_chart(st.session_state.dashboard_fig, use_container_width=True, key="dashboard_chart")
                
            except Exception as e:
                st.error(f"‚ùå L·ªói khi t·∫°o dashboard: {str(e)}")
        
        # Chart statistics
        st.markdown("#### üìà Th·ªëng k√™ Bi·ªÉu ƒë·ªì")
        if x_axis in df.columns:
            col_stats = {
                "D·ªØ li·ªáu": f"{len(df)} ƒëi·ªÉm",
                "Ki·ªÉu X": str(df[x_axis].dtype),
                "Thi·∫øu": f"{df[x_axis].isnull().sum()}",
                "Duy nh·∫•t": f"{df[x_axis].nunique()}"
            }
            
            for key, value in col_stats.items():
                st.metric(key, value)
    
    # Code display section
    with st.expander("üìã Xem Code ƒë∆∞·ª£c T·∫°o", expanded=False):
        st.markdown("### üêç Python Code")
        st.code(st.session_state.get('current_code', ''), language="python")
        
        st.markdown("### üìù H∆∞·ªõng d·∫´n S·ª≠ d·ª•ng")
        st.markdown("""
        **ƒê·ªÉ s·ª≠ d·ª•ng code n√†y:**
        1. ƒê·∫£m b·∫£o b·∫°n ƒë√£ c√†i ƒë·∫∑t: `pip install plotly pandas`
        2. Load d·ªØ li·ªáu c·ªßa b·∫°n v√†o DataFrame t√™n `df`
        3. Copy v√† paste code tr√™n
        4. Ch·∫°y ƒë·ªÉ xem bi·ªÉu ƒë·ªì
        
        **T√πy ch·ªânh th√™m:**
        - Thay ƒë·ªïi `color_discrete_sequence` ƒë·ªÉ ƒë·ªïi m√†u
        - ƒêi·ªÅu ch·ªânh `template` ƒë·ªÉ ƒë·ªïi theme
        - Th√™m `hover_data` ƒë·ªÉ hi·ªÉn th·ªã th√™m th√¥ng tin khi hover
        """)

# Chart History Section
st.markdown("---")
st.subheader("üñºÔ∏è L·ªãch s·ª≠ Bi·ªÉu ƒë·ªì")

if 'saved_charts' in st.session_state and st.session_state.saved_charts:
    st.markdown(f"**üìä B·∫°n ƒë√£ t·∫°o {len(st.session_state.saved_charts)} bi·ªÉu ƒë·ªì trong phi√™n n√†y**")
    
    # Display saved charts in tabs
    chart_tabs = st.tabs([f"{chart['type']} - {chart['timestamp']}" for chart in st.session_state.saved_charts[-3:]])
    
    for i, chart in enumerate(st.session_state.saved_charts[-3:]):
        with chart_tabs[i]:
            col1, col2 = st.columns([3, 1])
            
            with col1:
                st.plotly_chart(chart['figure'], use_container_width=True, key=f"history_chart_{i}")
            
            with col2:
                st.markdown(f"**üìÖ T·∫°o l√∫c:** {chart['timestamp']}")
                st.markdown(f"**üìä Lo·∫°i:** {chart['type']}")
                st.markdown(f"**üìù M√¥ t·∫£:** {chart['description']}")
                
                if st.button(f"üîÑ T·∫£i l·∫°i", key=f"reload_chart_{i}"):
                    st.session_state.current_fig = chart['figure']
                    st.session_state.current_code = chart['code']
                    st.session_state.chart_generated = True
                    st.rerun()
else:
    st.info("üìä Ch∆∞a c√≥ bi·ªÉu ƒë·ªì n√†o ƒë∆∞·ª£c l∆∞u trong phi√™n n√†y. T·∫°o bi·ªÉu ƒë·ªì ƒë·∫ßu ti√™n c·ªßa b·∫°n!")

# Tips and examples section
st.markdown("---")
st.subheader("üí° M·∫πo & V√≠ d·ª•")

with st.expander("üéØ M·∫πo T·∫°o Bi·ªÉu ƒë·ªì Hi·ªáu qu·∫£", expanded=False):
    st.markdown("""
    ### üìä Ch·ªçn Lo·∫°i Bi·ªÉu ƒë·ªì Ph√π h·ª£p
    
    **üîµ Bi·ªÉu ƒê·ªì Ph√¢n T√°n:**
    - S·ª≠ d·ª•ng khi: Mu·ªën t√¨m m·ªëi quan h·ªá gi·ªØa 2 bi·∫øn s·ªë
    - T·ªët nh·∫•t cho: D·ªØ li·ªáu li√™n t·ª•c, ph√°t hi·ªán xu h∆∞·ªõng
    - V√≠ d·ª•: M·ªëi quan h·ªá gi·ªØa tu·ªïi v√† thu nh·∫≠p
    
    **üìä Bi·ªÉu ƒê·ªì C·ªôt:**
    - S·ª≠ d·ª•ng khi: So s√°nh c√°c danh m·ª•c
    - T·ªët nh·∫•t cho: D·ªØ li·ªáu ph√¢n lo·∫°i, hi·ªÉn th·ªã t·ªïng/trung b√¨nh
    - V√≠ d·ª•: Doanh thu theo th√°ng, s·ªë l∆∞·ª£ng theo khu v·ª±c
    
    **üì¶ Bi·ªÉu ƒê·ªì H·ªôp:**
    - S·ª≠ d·ª•ng khi: Mu·ªën xem ph√¢n ph·ªëi v√† ngo·∫°i l·ªá
    - T·ªët nh·∫•t cho: So s√°nh ph√¢n ph·ªëi gi·ªØa c√°c nh√≥m
    - V√≠ d·ª•: ƒêi·ªÉm thi theo l·ªõp, l∆∞∆°ng theo ph√≤ng ban
    
    **üìà Chu·ªói Th·ªùi Gian:**
    - S·ª≠ d·ª•ng khi: D·ªØ li·ªáu c√≥ y·∫øu t·ªë th·ªùi gian
    - T·ªët nh·∫•t cho: Ph√°t hi·ªán xu h∆∞·ªõng, m√πa v·ª•, chu k·ª≥
    - V√≠ d·ª•: Gi√° c·ªï phi·∫øu theo th·ªùi gian, doanh s·ªë theo ng√†y
    
    **üî• B·∫£n ƒê·ªì Nhi·ªát:**
    - S·ª≠ d·ª•ng khi: Mu·ªën xem t∆∞∆°ng quan gi·ªØa nhi·ªÅu bi·∫øn
    - T·ªët nh·∫•t cho: Ph√°t hi·ªán m·ªëi quan h·ªá ·∫©n
    - V√≠ d·ª•: T∆∞∆°ng quan gi·ªØa c√°c ch·ªâ s·ªë KPI
    
    **ü•ß Bi·ªÉu ƒê·ªì Tr√≤n:**
    - S·ª≠ d·ª•ng khi: Hi·ªÉn th·ªã t·ª∑ l·ªá ph·∫ßn trƒÉm
    - T·ªët nh·∫•t cho: √çt h∆°n 7 danh m·ª•c
    - V√≠ d·ª•: Th·ªã ph·∫ßn, ph√¢n b·ªë kh√°ch h√†ng theo khu v·ª±c
    """)

with st.expander("üé® H∆∞·ªõng d·∫´n Ch·ªçn M√†u s·∫Øc", expanded=False):
    st.markdown("""
    ### üé® B·∫£ng M√†u v√† ·ª®ng d·ª•ng
    
    **üîµ Xanh Chuy√™n Nghi·ªáp:** Ph√π h·ª£p cho b√°o c√°o doanh nghi·ªáp, thuy·∫øt tr√¨nh
    **üåà S·ªëng ƒê·ªông:** T·ªët cho dashboard t∆∞∆°ng t√°c, d·ªØ li·ªáu ti√™u d√πng
    **üè¢ Doanh Nghi·ªáp:** Th√≠ch h·ª£p cho b√°o c√°o t√†i ch√≠nh, KPI
    **üåÖ Ho√†ng H√¥n:** ƒê·∫πp cho d·ªØ li·ªáu marketing, s√°ng t·∫°o
    **üåä ƒê·∫°i D∆∞∆°ng:** Ph√π h·ª£p cho d·ªØ li·ªáu m√¥i tr∆∞·ªùng, s·ª©c kh·ªèe
    **üåø T·ª± Nhi√™n:** T·ªët cho d·ªØ li·ªáu n√¥ng nghi·ªáp, xanh
    **üíú Gradient T√≠m:** Hi·ªán ƒë·∫°i cho tech, startup
    
    ### üí° M·∫πo Thi·∫øt k·∫ø
    - S·ª≠ d·ª•ng m√†u t∆∞∆°ng ph·∫£n ƒë·ªÉ l√†m n·ªïi b·∫≠t ƒëi·ªÉm quan tr·ªçng
    - Tr√°nh d√πng qu√° nhi·ªÅu m√†u trong m·ªôt bi·ªÉu ƒë·ªì (t·ªëi ƒëa 5-7 m√†u)
    - ƒê·∫£m b·∫£o m√†u s·∫Øc ph√π h·ª£p v·ªõi th∆∞∆°ng hi·ªáu c√¥ng ty
    - Ki·ªÉm tra ƒë·ªô t∆∞∆°ng ph·∫£n cho ng∆∞·ªùi khi·∫øm th·ªã m√†u
    """)

# Footer
st.markdown("---")
col1, col2, col3 = st.columns(3)

with col1:
    st.markdown("**üìà VizGenie-GPT Bi·ªÉu ƒë·ªì Th√¥ng minh**")
    st.caption("T·∫°o tr·ª±c quan h√≥a chuy√™n nghi·ªáp v·ªõi AI")

with col2:
    if st.session_state.get('chart_generated'):
        st.markdown("**‚úÖ Tr·∫°ng th√°i**")
        st.caption("Bi·ªÉu ƒë·ªì ƒë√£ s·∫µn s√†ng")
    else:
        st.markdown("**‚è≥ Tr·∫°ng th√°i**") 
        st.caption("S·∫µn s√†ng t·∫°o bi·ªÉu ƒë·ªì")

with col3:
    st.markdown("**üéØ M·∫πo**")
    st.caption("Th·ª≠ c√°c b·∫£ng m√†u v√† lo·∫°i bi·ªÉu ƒë·ªì kh√°c nhau!")

# Auto-clear old session data to prevent memory issues
if len(st.session_state.get('saved_charts', [])) > 10:
    st.session_state.saved_charts = st.session_state.saved_charts[-10:]